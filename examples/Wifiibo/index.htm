<!DOCTYPE html>
<html>
	<head>
		<title>Wifiibo</title>
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta charset="utf-8">
		
		<style>
			* {
				margin: 0;
				padding: 0;
			}
		
			body {
				font: normal 16px Arial, Helvetica, sans-serif;
			}
		
			h1,
			h3 {
				font: normal 32px 'Open Sans', Arial, Helvetica, sans-serif;
				vertical-align: middle;
				display: inline-block;
				margin: 0px 15px 0px 0px;
			}
		
			#alturl {
				float: right;
				vertical-align: middle;
				margin: 5px 0px 0px 0px;
				display: none;
			}
		
			#version {
				float: right;
				/*margin: -5px 0px 0px 70px;*/
				margin: -15px 10px 0px 0px;
				display: none;
			}
		
			#nfcversion {
				float: right;
				/*margin: -5px 0px 0px 70px;*/
				margin: -15px 0px 0px 0px;
				display: none;
			}
		
			#upload-button {
				display: none;
				background-color: #f44242;
			}
		
			button {
				border-radius: 2px;
				background-color: #87bae1;
				box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
				border: 0;
				color: #ffffff;
				font-weight: bold;
				font-size: 13px;
				cursor: pointer;
				margin: 2px;
		
				width: 105px;
				height: 32px;
			}
		
			table {
				border-collapse: collapse;
				width: 100%;
			}
		
			th,
			td {
				text-align: left;
				padding: 8px;
				margin: 10px 10px 10px 10px;
			}
		
			tr:nth-child(even) {
				background-color: #f2f2f2
			}
		
			th {
				background-color: #87bae1;
				color: white;
			}
		
			/*-----------------
					The Header
				------------------*/
		
			header {
				position: fixed;
				top: 0;
				left: 0;
				right: 0;
		
				height: 40px;
				z-index: 100;
		
				background-color: #282b2c;
				padding: 20px 40px;
				color: #fff;
				box-shadow: 0px 3px 2px rgba(0, 0, 0, 0.1);
			}
		
			header a {
				color: #ffffff;
				text-decoration: none;
			}
		
			header h2.tzine {
				float: right;
				opacity: 0.9;
			}
		
			header h2.tzine:hover {
				opacity: 1;
			}
		
			header h2.tzine a {
				font-size: 13px;
				text-transform: uppercase;
				display: inline-block;
				padding: 12px 18px;
				border-radius: 3px;
				background-color: #5895DB;
			}
		
		
			@media (max-width: 500px) {
		
				header {
					padding: 20px 15px;
				}
		
				header h1 {
					font-size: 24px;
					margin: 0;
				}
		
			}
		
			/*-----------------
					Main Content
				------------------*/
		
			input[type=text] {
				padding: 5px 10px 5px 5px;
				border: 2px solid #ccc;
				-webkit-border-radius: 2px;
				border-radius: 2px;
			}
		
		
			.main-content {
				box-sizing: border-box;
				text-align: center;
				margin: 80px auto 60px;
				padding: 0 40px;
			}
		
			.main-content h3 {
				font-size: 28px;
				color: #5a96b9;
				padding-bottom: 20px;
			}
		
			@media (max-width: 600px) {
		
				.main-content {
					margin: 45px auto;
					padding: 0 25px;
				}
		
			}
		
		
			/*-------------------
					All Products Page
				--------------------*/
		
			/*	Filter Form	*/
		
			.filters {
				box-sizing: border-box;
				padding: 5px 30px 30px;
				margin: 20px 20px 100px;
				width: 260px;
				background-color: #FFF;
				border: 1px solid #DBE3E7;
				border-radius: 3px;
				box-shadow: 1px 3px 1px rgba(0, 0, 0, 0.08);
				/*position: fixed;*/
				text-align: left;
				color: #2B2E31;
				opacity: 1;
				/*pointer-events: none;*/
			}
		
			.filters .filter-criteria {
				display: block;
				margin: 10px 0 10px;
			}
		
			.filters .filter-options {
				display: block;
				margin: 10px 0 10px;
				padding: 5px 10px 10px 10px;
			}
		
			.filters span {
				font-size: 14px;
				display: block;
				margin-bottom: 12px;
				font-weight: bold;
				margin-top: 20px;
			}
		
			.filters label {
				display: block;
				line-height: 1.4;
				font-size: 15px;
			}
		
			.filters label input {
				margin-right: 10px;
			}
		
			.filters button {
				border-radius: 2px;
				background-color: #4BC34B;
				box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
				border: 0;
				color: #ffffff;
				font-weight: bold;
				font-size: 13px;
				cursor: pointer;
		
				width: 125px;
				height: 32px;
				margin-top: 10px;
			}
		
			/*	Products List	*/
		
			.all-products h3 {
				opacity: 0;
			}
		
			.products-list {
				/*list-style:none;*/
				margin-left: 25px;
				margin-right: 25px;
				/*max-width: 1500px;*/
				text-align: center;
				padding: 0;
				opacity: 0;
				font-size: 0;
			}
		
			.all-products.visible .products-list,
			.all-products.visible .filters,
			.all-products.visible h3 {
				opacity: 1;
				transition: 1s;
				pointer-events: auto;
			}
		
			.products-list>li {
				box-sizing: border-box;
				display: inline-block;
				/*cursor: pointer;*/
				position: relative;
				transition: 0.2s;
		
				text-align: left;
				font: normal 12px sans-serif;
		
				background-color: #ffffff;
				border: 1px solid #dbe3e7;
				border-radius: 3px;
				box-shadow: 1px 3px 1px rgba(0, 0, 0, 0.08);
		
				margin: 0 12px 14px 0;
				padding: 25px;
			}
		
			.products-list>li.hidden {
				opacity: 0.2;
				pointer-events: none;
			}
		
			/* The product image */
		
			img {
				max-height: 90%;
				max-width: 90%;
				width: auto;
				height: auto;
				position: absolute;
				top: 0;
				bottom: 0;
				left: 0;
				right: 0;
				margin: auto;
			}
		
			.products-list .product-photo,
			.products-list .product-photo-nodump {
				display: block;
				text-align: center;
				position: relative;
				height: 200px;
				width: 250px;
				margin-bottom: 25px;
				padding: 20px 0;
				box-sizing: border-box;
				max-width: 100%;
				max-height: 100%;
				/*margin-top: -5px;*/
				/*margin-bottom: 0px;*/
				margin-left: auto;
				margin-right: auto;
			}
			
			.products-list .product-photo {
				box-shadow: 0 0 20px 8px #f3f3f3 inset;
			}
		
			.products-list .product-photo-nodump {
				box-shadow: 0 0 20px 8px #e3e3ff inset;
			}
		
			/* The product name */
		
			.products-list h2 {
				display: block;
				font-size: 18px;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
				max-width: 240px;
				margin: 0;
				text-align: center;
			}
		
			.products-list h2 a {
				text-decoration: none;
				color: #2B2E31;
			}
		
			/* Product description */
		
			.products-list .product-description {
				margin-top: 20px;
		
				color: #5d5d5d;
				font-size: 14px;
				line-height: 1.45;
				white-space: normal;
		
				max-width: 280px;
				margin-bottom: 20px;
		
				list-style: none;
			}
		
			.products-list .product-description li {
				/*display: inline-block;*/
				margin-right: 5px;
			}
		
			.products-list .product-description li:first-child {
				display: block;
			}
		
			.products-list .product-description li span {
				font-weight: bold;
			}
		
			/* Price and order button */
		
			.products-list button {
				border-radius: 2px;
				background-color: #87bae1;
				box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
				border: 0;
				color: #ffffff;
				font-weight: bold;
				font-size: 13px;
				cursor: pointer;
		
				width: 95px;
				height: 32px;
			}
		
			.products-list .product-price {
				float: right;
		
				color: #4e4e4e;
				font-weight: bold;
				font-size: 20px;
		
				padding-top: 6px;
				margin: 0;
			}
		
			.products-list .highlight {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background-color: rgba(0, 0, 0, 0.1);
				opacity: 0;
				transition: 0.4s;
			}
		
			.products-list>li:hover .highlight {
				opacity: 1;
			}
		
			/* Making the list responsive */
		
			@media (max-width: 800px) {
		
				.products-list .product-photo {
					width: 225px;
				}
		
				.products-list .product-description {
					max-width: 225px;
				}
			}
		
		
			/*---------------------------
					Single Product Page
				----------------------------*/
		
			.single-product {
				z-index: 100;
			}
		
			.overlay {
				height: 20px;
				width: 100%;
				position: fixed;
				top: 0;
				left: 0;
				background-color: #282b2c;
				transition: 0.6s;
				z-index: 100;
			}
		
			.single-product.visible .overlay {
				height: 100%;
			}
		
			.preview-large {
				box-sizing: border-box;
				width: 560px;
				height: 700px;
				position: fixed;
				left: 50%;
				margin-left: -275px;
				top: 50%;
				margin-top: -375px;
				pointer-events: none;
		
				border-radius: 6px;
				background-color: #ffffff;
		
				z-index: 102;
				opacity: 0;
				transition: 0.4s;
		
			}
		
			.single-product.visible .preview-large {
				opacity: 1;
				transition: 1.4s;
				pointer-events: auto;
			}
		
			.preview-large h3 {
				margin-top: 20px;
			}
		
			.preview-large img {
				width: 100%;
				height: 280px;
				border-bottom: 3px solid #efefef;
				border-radius: 5px 5px 0 0;
			}
		
			.preview-large p {
				line-height: 23px;
				padding: 50px 45px;
			}
		
			.close {
				position: absolute;
				right: 25px;
				top: 15px;
		
				font-size: 28px;
				color: #555;
				cursor: pointer;
			}
		
		
			/*---------------------------
					Error Page
				----------------------------*/
		
			.error {
				opacity: 0;
				transition: 0.6s;
				pointer-events: none;
				position: absolute;
				left: 0;
				top: 100px;
				width: 100%;
			}
		
			.error.visible {
				opacity: 1;
			}
		
			.error h3 {
				font-size: 40px;
			}
		
			.statusInfo {
				opacity: 1;
			}
		
			.readWriteProgress {
				width: 100%;
				background-color: #ddd;
			}
		
			.readWriteProgressBar {
				width: 0%;
				height: 4px;
				background-color: #33b5e5;
				text-align: center;
				line-height: 4px;
				color: white;
			}
		
			/*-----------------------------
					Side Nav
				------------------------------*/
			.sidenav {
				height: 100%;
				width: 0;
				position: fixed;
				z-index: 1;
				top: 0;
				left: 0;
				background-color: #aaaaaa;
				overflow-x: hidden;
				transition: 0.5s;
				padding-top: 80px;
			}
		
			.sidenav a {
				padding: 8px 8px 8px 32px;
				text-decoration: none;
				font-size: 25px;
				color: #818181;
				display: block;
				transition: 0.3s;
			}
		
			.sidenav a:hover {
				color: #f1f1f1;
			}
		
			.sidenav .closebtn {
				/*position: absolute;*/
				float: right;
				top: 0;
				right: 15px;
				font-size: 36px;
				margin-left: 5px;
			}
		
			.print-canvas {
				height: 100%;
				width: 100%;
			}
		
			#main {
				transition: margin-left .5s;
				padding: 16px;
			}
		
			.extra-margin {
				display: none;
			}
		
			.status-style {
				display: block;
				padding-left: 50px;
				padding-top: 2px;
			}
		
			.amiibo-count {
				display: block;
				text-align: center;
			}
		
			@page {
				size: letter;
				margin-top: 0in;
				margin-left: 0.34in;
			}
		
			@media print {
		
				.no-print,
				.no-print * {
					display: none !important;
				}
		
				header {
					display: none;
				}
		
				.main-content {
					padding: 0px;
					margin: 0px auto 0px 0px;
		
				}
		
				.sidenav {
					display: none;
				}
		
				#main {
					padding: 0px;
				}
		
				#container #content {
					width: 100%;
					margin: 0px;
					padding: 0px;
				}
		
				.print-border-empty {
					align-content: center;
					height: 100%;
					width: 100%;
				}
		
				.print-border {
					align-content: center;
					height: 100%;
					width: 100%;
					/*
					background-size: cover;
					background-repeat: no-repeat;
					background-position: center center;
					-webkit-border-radius: 99em;
					-moz-border-radius: 99em;
					border-radius: 99em;
					border: 5px solid #eee;
					box-shadow: 0 3px 2px rgba(0, 0, 0, 0.3);
					background: radial-gradient(lightblue, white);
					-webkit-print-color-adjust: exact; 
					*/
				}
		
				.products-list {
					text-align: left;
					margin: 0px;
				}
		
				.products-list>li {
					box-sizing: unset;
					border: none;
					border-radius: 0px;
					box-shadow: none;
					display: inline-block;
					height: 1.5in;
					width: 1.5in;
		
					margin: 0.25in;
					padding: 0px;
				}
		
				.products-list .product-photo {
					display: block;
					width: 100%;
					height: 100%;
					text-align: center;
					border: none;
					box-shadow: none;
					max-width: 100%;
					max-height: 100%;
					margin-top: -5px;
					margin-bottom: 0px;
					margin-left: auto;
					margin-right: auto;
				}
		
				.products-list .product-description {
					display: none;
				}
		
				.extra-margin {
					display: inline-block;
					margin-top: 5px;
				}
		
				/* The product name */
		
				.products-list h2 {
					display: block;
					font-size: 11px;
					white-space: normal;
					overflow: hidden;
					text-overflow: ellipsis;
					width: 60%;
					max-width: 100%;
					margin-top: 0px;
					margin-bottom: 0px;
					margin-left: 30px;
					margin-right: 30px;
					text-align: center;
					height: 19%;
				}
		
				.products-list .product-description li {
					display: none;
				}
		
				.products-list .product-description li:first-child {
					display: none;
				}
		
				.products-list .product-description li span {
					display: none;
				}
		
				/* Price and order button */
		
				.products-list button {
					display: none;
				}
			}
		
		</style>
		<script>
		const amiiboCardBlank = () => `
			<li>
				<div class="print-border" style="background:none">
				</div>
			</li>
		`;
		
		const amiiboCardPrint = (taginfo, filterable) => `
			<li ${(filterable) ? `class="data-index" data-index="${taginfo["filename"]}"` : ``}>
				<div class="print-border">
				<a>
				<canvas class="print-canvas" id="${taginfo["id"]}"></canvas>
				</a>
				<div class="extra-margin"></div>
				<ul class="product-description" style="display: none">
					${Object.keys(taginfo).map((name, val) => `<li filterKey="${name}" filterValue="${decodeURIComponent(taginfo[name]).replace(/\\u/g, '&#x')}"><span>${name.charAt(0).toUpperCase()+name.slice(1)}: </span>${decodeURIComponent(taginfo[name]).replace(/\\u/g, '&#x')}</li>\n`).join('')}
				</ul>
				</div>
			</li>
		`;
		
		const amiiboCard3 = (taginfo, title, img, imgTags, showButtons, filterable, isdump) => `
			<li ${(filterable) ? `class="data-index" data-index="${taginfo["filename"]}"` : ``}>
				<div class="print-border">
				<div class="extra-margin"></div>
				${(img != null) ? `<div class="product-photo` + (isdump ? `` : `-nodump`) + `"><img src="${img}" ${imgTags} alt="Image not found"/></div>` : ``}
				<h2>${title}</h2>
				<ul class="product-description">
					${Object.keys(taginfo).map((name, val) => `<li filterKey="${name}" filterValue="${decodeURIComponent(taginfo[name]).replace(/\\u/g, '&#x')}"><span>${name.charAt(0).toUpperCase()+name.slice(1)}: </span>${decodeURIComponent(taginfo[name]).replace(/\\u/g, '&#x')}</li>\n`).join('')}
					<li filterKey="isdump" filterValue="${isdump}" style="display:none"></li>
				</ul>
				${(showButtons && isdump) ? `
				<button onclick="window.history.replaceState({}, 'Write Tag', '?filename=${taginfo["filename"]}#writeamiibo'); windowHashChange();">Write Tag</button>
				` : ``}
				${(showButtons && !isdump) ? `
				<button onclick="window.history.replaceState({}, 'Create Tag', '?id=${taginfo["id"]}#createamiibo'); windowHashChange();">Create Tag</button>
				` : ``}
				${(showButtons && isdump) ? `
				<button onclick="window.location.href='?filename=${taginfo["filename"]}#deleteamiibo'">Delete</button>
				<form style="display:inline-block" method="get" action="${"http://" + getHost() + taginfo["filename"]}">
					<button style="width:60px" type="submit">\u2B73</button>
				</form>
				` : ``}
				</div>
			</li>
		`;
		
		const singleProductPageHTML = (title, btnClass, btnClick, btnCancelClick, showSaveFile) => `
			<div class="overlay"></div>
			<div class="preview-large">
				<h3>${title}</h3>
				<div>
					<button class="${btnClass}" id="btnSingleProduct" onclick="${btnClick}">${title}</button>
					${(btnCancelClick != null) ? `<button id="btncancel" onclick="${btnCancelClick}">Cancel</button>` : ``}
				</div>
				<br/>
				${(showSaveFile) ? '<div class="saveFile"></div>' : ''}
				<div>
					<h4 style='display:inline'>Status:</h4>
					<span class="statusInfo"></span>
					<div class="tag-percent">
						<div class="readWriteProgress">
							<div class="readWriteProgressBar"></div>
						</div>
						<br/>
					</div>
				</div>
				<ul class="products-list amiiboData" style="opacity:100; height: auto; margin: 0 auto;">
				</ul>
				<span class="close">×</span>
			</div>
		`;
		
		var pct = 0;
		var webVer = "1.36";

		var connection;
		var amiiboDBJSON;
		var lastAmiiboList;
		var amiiboJSONURL =      'https://raw.githubusercontent.com/N3evin/AmiiboAPI/master/database/amiibo.json';
		var amiiboImageBaseURL = 'https://raw.githubusercontent.com/N3evin/AmiiboAPI/master/images/icon_';
		// Used whenever there's a pending PR for some updated imagery- replace BRANCHNAME with branch name
		//var amiiboImageBaseURL = 'https://raw.githubusercontent.com/Xerxes3rd/AmiiboAPI/BRANCHNAME/images/icon_';
		var forceRefresh = false;
		var suppressRefresh = false;
		var urlParams = {};
		var filters = {};
		
		window.onhashchange = windowHashChange;
		window.onpopstate = getURLParams;
		
		wsConnect();
		
		function getWSConnURL() {
			return 'ws://'+getHost()+'/ws';
		}
		
		function getHost() {
			var host = document.location.host;

			if (document.location.host === "") {
				//host = '192.168.1.171'; // For testing
				host = 'wifiibo.local'; // For testing
				//host = '192.168.4.1';
			}

			return host;
		}
		
		function imageURLFromInfo(id) {
			var startIndex = id.startsWith("0x") ? 2 : 0;
			return amiiboImageBaseURL + id.substr(startIndex, 8).toLowerCase()+'-'+id.substr(startIndex+8, 8).toLowerCase()+'.png';
		}
		
		function setStatusMessage(message) {
			var elem = document.getElementById('statusMessage');
			if (elem !== null) {
				if ((message === null) || (message === ""))
					elem.innerHTML = "";
				else
					elem.innerHTML = "Status: " + message;
			}
			console.log("Status: " + message);
		}
		
		function checkGetFileInfo() {
			var filename = getQueryFilename();
			if (filename != null && filename.length > 0) {
				try {
					var msg = { "func":"getfileinfo", "filename":filename };
					console.log(msg);
					connection.send(JSON.stringify(msg));
				}
				catch (e) {
				}
			}
			else {
				var id = getQueryID();
				if (id != null && id.length > 0) {
					var info = {};
					info['id'] = id;
					var newHTML = createAmiiboCard(info, 'style="height:100%;width:unset"', false, true, false);
					
					Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => {
						elem.innerHTML = newHTML;
						elem.className += ' visible';
					});
				}
			}
			
		}
		
		function wsConnect()
		{
			setStatusMessage('Connecting to ' + getWSConnURL() + ' for amiibo list...');
			connection = new WebSocket(getWSConnURL(), ['arduino']);
			
			connection.onopen = function () {
				setStatusMessage('Connected to ' + getWSConnURL() + ', requesting amiibo list.');
				
				sendAmiiboFunc('listamiibochunk', true);
				checkGetFileInfo();
			};
			connection.onerror = function (error) {
				console.log('WebSocket Error ', error);
			};
			connection.onmessage = function (e) {
				//console.log('Server: ', e.data);
				var obj = JSON.parse(e.data);
				if (obj["status"] != null) {
					console.log("WS Status: " + obj["status"]);
					//document.getElementById("status").innerHTML = obj["status"];
					Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = obj["status"]; });
				}
				if (obj["progress"] != null) {
					console.log("WS Progress: " + obj["progress"]);
					setProgress(obj["progress"]);
				}
				if (obj["taginfo"] != null) {
					console.log("WS TagInfo: " + obj["taginfo"]);
					var newHTML = createAmiiboCard(obj["taginfo"], 'style="height:100%;width:unset"', false, true);
					
					Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => {
						elem.innerHTML = newHTML;
						elem.className += ' visible';
					});
					
					Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
						createSaveFileHTML(elem, '/' + getAmiiboMainName(obj["taginfo"]) + '.bin');
						elem.className += ' visible';
					});
					//result.className += ' visible';
					//document.getElementById('status').innerHTML += "<br/>" + JSON.stringify(obj["taginfo"], null, "<br>");
				}
				if (obj["tagInfoList"] != null) {
					getAmiiboJSONDB();
					var page = document.getElementsByClassName('all-products')[0];
					lastAmiiboList = obj["tagInfoList"];
					processAmiiboList(obj["tagInfoList"]);
					if (page.className.indexOf('visible') === -1) {
						page.className += ' visible';
					}
				}
				if (obj["tagInfoList_Chunk"] != null) {
					var listRoot = "tagInfoList_Chunk";
					if (obj["start"]) {
						getAmiiboJSONDB();
						lastAmiiboList = {};
						lastAmiiboList["start"] = true;
						lastAmiiboList[listRoot] = new Array();
					}
					lastAmiiboList[listRoot] = lastAmiiboList[listRoot].concat(obj[listRoot]);
					setStatusMessage("Received chunk info for " + lastAmiiboList[listRoot].length + " amiibos...");
					if (obj["end"]) {
						lastAmiiboList["end"] = true;
						setStatusMessage("");
						processAmiiboList(lastAmiiboList[listRoot]);
						var page = document.getElementsByClassName('all-products')[0];
						if (page.className.indexOf('visible') === -1) {
							page.className += ' visible';
						}
					}
					else {
						setProgress(0);
						console.log('listamiibochunk');
						var lastFilename = obj[listRoot][obj[listRoot].length - 1]["filename"];
						var msg = { "func":"listamiibochunk", "lastFilename":lastFilename };
						connection.send(JSON.stringify(msg));
						console.log("Test");
					}
				}
				if (obj["tagInfoList_Async"] != null) {
					var listRoot = "tagInfoList_Async";
					if (obj["start"]) {
						getAmiiboJSONDB();
						lastAmiiboList = {};
						lastAmiiboList["start"] = true;
						lastAmiiboList[listRoot] = new Array();
					}
					lastAmiiboList[listRoot] = lastAmiiboList[listRoot].concat(obj[listRoot]);
					setStatusMessage("Received async info for " + lastAmiiboList[listRoot].length + " amiibos...");
					if (obj["end"]) {
						lastAmiiboList["end"] = true;
						setStatusMessage("");
						processAmiiboList(lastAmiiboList[listRoot]);
						var page = document.getElementsByClassName('all-products')[0];
						if (page.className.indexOf('visible') === -1) {
							page.className += ' visible';
						}
					}
				}

				if (obj["saveAmiibo"] != null) {
					if (obj["saveAmiibo"] >= 0) {
						Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
							elem.innerHTML = "";
							elem.classList.remove('visible');
						});
						forceRefresh = true;
					}
				}
				if (obj["invalidkey"] != null) {
					document.getElementById('upload-button').style.display = "inline-block";
				}
				if (obj["validkey"] != null) {
					document.getElementById('upload-button').style.display = "none";
				}
				if (obj["wifistatus"] != null) {
					console.log("Wifi Status: " + obj["wifistatus"]);
					if (obj["scanresults"] != null) {
						Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Scan complete."; });
						var elem = document.getElementById('scanresults');
						if (elem != null) {
							elem.innerHTML = createWifiInfoTableHTML(obj["scanresults"]);
						}
					}
				}
				if (obj["serverip"] != null) {
					var elem = document.getElementById('alturl');
					if (elem != null) {
						var loc = document.location;
						var newURL = loc.protocol + '//' + obj["serverip"] + loc.pathname;
						elem.innerHTML = '<a href="' + newURL + '">IP: ' + obj["serverip"] + '</a>';
						elem.style.display = "inline-block";
					}
				}
				if (obj["version"] != null) {
					var elem = document.getElementById('version');
					if (elem != null) {
						var verStr = "v" + obj["version"];
						if (obj["version"] != webVer)
							verStr += '/' + webVer;
						elem.innerHTML = verStr;
						elem.style.display = "inline-block";
					}
				}
				if (obj["nfcversion"] != null) {
					var elem = document.getElementById('nfcversion');
					if (elem != null) {
						var verStr = "" + obj["nfcversion"];
						elem.innerHTML = verStr;
						elem.style.display = "inline-block";
					}
				}
			};
		}
		
		function createWifiInfoTableHTML(infoJSON) {
			console.log(infoJSON);
			var html = '';
			html += '<table>';
			
			html += '<tr>';
			html += '<th>' + 'SSID' + '</th>';
			html += '<th>' + 'RSSI' + '</th>';
			html += '<th>' + 'Encryption' + '</th>';
			html += '</tr>';
			
			for(var i = 0; i < infoJSON.length; i++) {
				var network = infoJSON[i];
				if ((network != null) && 
					(network['ssid'] != null) && 
					(network['ssid'] !== undefined) &&
					(network['ssid'].length > 0)) {
					html += '<tr>';
					html += '<td><a href="javascript:setWifiSSIDField(\''+network["ssid"]+'\')">' + network["ssid"] + '</a></td>';
					html += '<td>' + network["rssi"] + '</td>';
					html += '<td>' + ((network["encryptionType"] > 0) ? 'Secured' : 'Open') + '</td>';
					html += '</tr>';
				}
			}
			
			html += '</table>';
			
			return html;
		}
		
		function setWifiSSIDField(ssid) {
			document.getElementById("wifissid").value = ssid;
		}

		//	Event handlers for frontend navigation
		//	Checkbox filtering

		function filtercheckboxClick(elem) {
			var specName = elem.name;
			console.log("Filter checkbox clicked, name: " + specName);

			// When a checkbox is checked we need to write that in the filters object;
			if(elem.checked) {

				// If the filter for this specification isn't created yet - do it.
				if(!(filters[specName] && filters[specName].length)){
					filters[specName] = [];
				}

				//	Push values into the chosen filter array
				filters[specName].push(elem.value);

				// Change the url hash;
				createQueryHash(filters);

			}

			// When a checkbox is unchecked we need to remove its value from the filters object.
			if(!(elem.checked)) {

				if(filters[specName] && filters[specName].length && (filters[specName].indexOf(elem.value) !== -1)){

					// Find the checkbox value in the corresponding array inside the filters object.
					var index = filters[specName].indexOf(elem.value);

					// Remove it.
					filters[specName].splice(index, 1);

					// If it was the last remaining value for this specification,
					// delete the whole array.
					if(!filters[specName].length){
						delete filters[specName];
					}

				}

				// Change the url hash;
				createQueryHash(filters);
			}
		}
		function getQueryHash(filters){
			if (Object.keys(filters).length > 0){
				return '#filter/' + JSON.stringify(filters);
			}
			else {
				return '#';
			}
		}
		function createQueryHash(filters){
			window.location.hash = getQueryHash(filters);
			windowHashChange();
			// Here we check if filters isn't empty.
			//if (Object.keys(filters).length > 0){
			//	// Stringify the object via JSON.stringify and write it after the '#filter' keyword.
			//	window.location.hash = '#filter/' + JSON.stringify(filters);
			//	console.log("Set hash to " + window.location.hash);
			//}
			//else{
			//	// If it's empty change the hash to '#' (the homepage).
			//	window.location.hash = '#';
			//	console.log("Filters is empty, len = " + filters.length);
			//	console.log(JSON.stringify(filters));
			//}

		}
		
		function setProgress(pct) {
			Array.prototype.forEach.call(document.getElementsByClassName("readWriteProgressBar"), (elem) => {
				elem.style.width = pct + '%';
				//elem.innerHTML = pct * 1  + '%'; // Sets the % text
			});
			console.log(pct + '%');
		}
		function nop() {
		}
		function windowHashChange() {
			if (suppressRefresh) {
				nop();
			}
			else {
				render(decodeURI(window.location.hash));
			}
			suppressRefresh = false;
		}
		function render(url) {
			// Get the keyword from the url.
			var temp = '';
			
			if (url)
				temp = url.split('/')[0];

			// Hide whatever page is currently shown.
			//$('.main-content .page').removeClass('visible');
			var i;
			var j;
			
			var main = document.getElementsByClassName("main-content");
			for (i = 0; i < main.length; i++) {
				var page = main[i].getElementsByClassName("page");
				for (j = 0; j < page.length; j++) {
					//if (page[j] != main)
						page[j].style.display = 'none'; 
				}
			}

			var map = {
				// The Homepage.
				'': function() {
					// Clear the filters object, uncheck all checkboxes, show all the products
					filters = {};
					Array.prototype.forEach.call(document.getElementsByClassName("filtercheckbox"), (elem) => { elem.checked = false; });
					//if (!suppressRefresh) {
						renderAmiiboListPage();
						renderFilterResults(null);
					//}
				},

				// Single Products page.
				'#readamiibo': function() {
					renderSinglePage('read-amiibo');
				},
				
				'#writeamiibo': function() {
					filename = url.split('#writeamiibo/')[1];
					suppressRefresh = true;
					renderSinglePage('write-amiibo', filename);
					//checkGetFileInfo();
				},
				
				'#createamiibo': function() {
					id = url.split('#createamiibo/')[1];
					suppressRefresh = true;
					renderSinglePage('create-amiibo', id);
					//checkGetFileInfo();
				},
				
				'#deleteamiibo': function() {
					// Grab the string after the '#filter/' keyword. Call the filtering function.
					filename = url.split('#deleteamiibo/')[1];
					renderSinglePage('delete-amiibo', filename);
					//checkGetFileInfo();
				},

				'#uploadamiibo': function() {
					renderSinglePage('upload-amiibo');
				},
				
				'#uploadretailkeys': function() {
					renderSinglePage('upload-retail-keys');
				},
				
				'#configurewifi': function() {
					renderSinglePage('configure-wifi');
				},
				
				'#filter': function() {
					// Grab the string after the '#filter/' keyword. Call the filtering function.
					url = url.split('#filter/')[1].trim();

					// Try and parse the filters object from the query string.
					try {
						filters = JSON.parse(url);
					}
						// If it isn't a valid json, go back to homepage ( the rest of the code won't be executed ).
					catch(err) {
						window.location.hash = '#';
						return;
					}

					renderFilterResults(filters);
					//renderAmiiboListPage();
				}
			};

			// Execute the needed function depending on the url keyword (stored in temp).
			if(map[temp]){
				map[temp]();
			}
			// If the keyword isn't listed in the above - render the error page.
			else {
				renderErrorPage();
			}
		}
		
		function triggerWifiScan() {
			try {
				sendAmiiboFunc('triggerScanWifi', true);
				Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Scanning Wifi networks..."; });
			}
			catch (e) {
				Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Error during scan."; });
			}
		}
		
		function showHideListItem(elem, show) {
			if (show) {
				elem.style.display = "inline-block";
				elem.classList.remove('hidden');
			}
			else {
				// Comment out this line to grey out hidden items instead of hiding them altogether
				elem.style.display = "none";
				elem.classList.add('hidden');
			}
		}
		
		function renderFilterResults(filters){
			//if (!lastAmiiboList || !lastAmiiboList["end"]) return;
			if (amiiboDBJSON == null) return;
			var numDisplayed = 0;
			var total = 0;
			
			if (filters == null) {
				Array.prototype.forEach.call(document.getElementsByClassName("data-index"), (elem) => {
					//console.log("Showing element " + elem.getAttribute("data-index"));
					showHideListItem(elem, true);
					numDisplayed++;
					total++;
				});
			}
			else {
				Array.prototype.forEach.call(document.getElementsByClassName("data-index"), (elem) => 
				{
					var numMatchesRequired = Object.keys(filters).length;
					
					var matchedFilter = 0;
					var children = elem.getElementsByTagName("*");
					for (child in children) {
						
						if (children[child] && children[child].hasAttribute && children[child].hasAttribute("filterkey")) {
							var key = children[child].getAttribute("filterkey");
							var value = children[child].getAttribute("filtervalue");
							if ((filters[key] !== undefined)) {
								for (i in filters[key]) {
									if (filters[key][i] === value) {
										//console.log("Matched " + key + "=" + value);
										matchedFilter++;
									}
								}
							}
						}
					}
					
					if (matchedFilter < numMatchesRequired) {
						//console.log("Hiding element " + elem.getAttribute("data-index"));
						//elem.style.display = "none";
						showHideListItem(elem, false);
					}
					else {
						//console.log("Showing element " + elem.getAttribute("data-index"));
						showHideListItem(elem, true);
						numDisplayed++;
					}
					total++;
				});
			}
			document.getElementById("amiiboCount").innerHTML = "Showing " + numDisplayed + " of " + total + " amiibos.";
		}
		function generateAmiiboListsHTML(data){
			// Uses Handlebars to create a list of products using the provided data.
			// This function is called only once on page load.
		}
		function getAmiiboJSONDB() {
			if (amiiboDBJSON == null) {
				var xmlhttp = new XMLHttpRequest();

				xmlhttp.onreadystatechange = function() {
					if (this.readyState === XMLHttpRequest.DONE) {
					  if (this.status === 200) {
						amiiboDBJSON = JSON.parse(this.responseText);
						//if (lastAmiiboList != null) {
						//	if (lastAmiiboList["end"]) {
								processAmiiboList(lastAmiiboList);
						//	}
						//}
						console.log("Parsed Amiibo JSON DB.");
						generateFilters();
						createQueryHash(filters);
						renderAmiiboListPage();
					  } else {
						// handle error
					  }
					}
				};
				
				xmlhttp.open("GET", amiiboJSONURL, true);
				xmlhttp.send();
			}
		}
		
		function createSaveFileHTML(element, filename) {
			element.innerHTML = "";
			var xmlHttp;
			var input = document.createElement("input");
			input.type = "text";
			input.multiple = false;
			input.name = "data";
			
			element.appendChild(input);
			var button = document.createElement("button");
			button.innerHTML = 'Save amiibo';
			element.appendChild(button);
			
			verifyFilename(input, filename);

			button.onclick = function(e){
				filename = input.value;
				if ((filename != null) && (filename.length > 0)) {
					console.log('saveamiibo');
					var msg = { "func":'saveamiibo', "filename":filename };
					connection.send(JSON.stringify(msg));
				}
				else {
					console.log("Filename is null");
				}
			}
		}
		
		function getHexID(id)
		{
			return "0x"+id.toLowerCase();
		}
		
		function getHexID_Upper(id)
		{
			return "0x"+id.toUpperCase();
		}
		
		function getAmiiboMainName(info)
		{
			var mainName = "(Unknown)";
			if ('id' in info && amiiboDBJSON != null) {
				var hexID = getHexID(info['id']);
				
				if (hexID in amiiboDBJSON['amiibos']) {
					mainName = amiiboDBJSON['amiibos'][hexID]['name'];
				}
				else
				{
					hexID = getHexID_Upper(info['id']);
					if (hexID in amiiboDBJSON['amiibos']) {
						mainName = amiiboDBJSON['amiibos'][hexID]['name'];
					}
				}
			}
			return mainName;
		}
		
		// Function modifies the info object!!!
		function getAmiiboData(info) {
			if ('id' in info) {
				//var hexID = getHexID(info['id']);
								
				var hexCharacter = 		"0x"+info['id'].substr( 0, 4).toLowerCase();
				var hexVariation = 		"0x"+info['id'].substr( 4, 2).toLowerCase();
				var hexForm = 			"0x"+info['id'].substr( 6, 2).toLowerCase();
				var hexAmiiboNumber = 	"0x"+info['id'].substr( 8, 4).toLowerCase();
				var hexSeries = 		"0x"+info['id'].substr(12, 2).toLowerCase();
				var hex02 =				"0x"+info['id'].substr(14, 2).toLowerCase(); // Always 0x02
				var hexGameSeries = 	"0x"+info['id'].substr( 0, 3).toLowerCase();
				
				if (amiiboDBJSON != null) {
					if (hexSeries in amiiboDBJSON['amiibo_series']) {
						info['amiibo Series'] = amiiboDBJSON['amiibo_series'][hexSeries];
					}
					else {
						info['amiibo Series'] = "?";
					}

					if (hexCharacter in amiiboDBJSON['characters']) {
						info['Character'] = amiiboDBJSON['characters'][hexCharacter];
					}
					else {
						info['Character'] = "?";
					}
					
					if (hexGameSeries in amiiboDBJSON['game_series']) {
						info['Game Series'] = amiiboDBJSON['game_series'][hexGameSeries];
					}
					else {
						info['Game Series'] = "?";
					}
					
					if (hexForm in amiiboDBJSON['types']) {
						info['Form'] = amiiboDBJSON['types'][hexForm];
					}
					else {
						info['Form'] = "?";
					}
				}
			}
		}
		
		function createAmiiboCard(info, imgTags, showButton, filterable, isdump)
		{
			var mainName = "";
			var imgURL = "";
			
			if ('id' in info) {
				imgURL = imageURLFromInfo(info["id"]);
				mainName = getAmiiboMainName(info);
				getAmiiboData(info);
			}
			
			if (urlParams["print"])
				return amiiboCardPrint(info, filterable);
			else
				return amiiboCard3(info, mainName, imgURL, imgTags, showButton, filterable, isdump);
		}
		
		function renderAmiiboListPage(data){
			var page = document.getElementsByClassName('all-products')[0];
			
			page.style.display = 'block';
			//var xmlhttp = new XMLHttpRequest();
			//var url = 'http://'+host+'/getAmiiboList';
            //
			//xmlhttp.onreadystatechange = function() {
			//	if (this.readyState == 4 && this.status == 200) {
			//		var arr = JSON.parse(this.responseText);
			//		var tagInfo = arr["tagInfo"];
			//		processAmiiboList(tagInfo);
			//	}
			//};
			//
			//xmlhttp.open("GET", url, true);
			//xmlhttp.send();
			
			//try {
			//	sendAmiiboFunc('listamiibo', true);
			//}
			//catch (e) {
			//	console.log(e);
			//}
			if ((!lastAmiiboList) || (!lastAmiiboList["end"])) {
				try {
					//sendAmiiboFunc('listamiiboasync', true);
				}
				catch (e) {
					//console.log(e);
				}
			}
			
			if (page.className.indexOf('visible') === -1) {
				page.className += ' visible';
			}
		}
		function compareAmiibo(a,b) {
		  var aname = getAmiiboMainName(a);
		  var bname = getAmiiboMainName(b);
		  if (aname < bname)
			return -1;
		  if (aname > bname)
			return 1;
		  return 0;
		}
		function drawImageScaled(img, ctx, imgScale, yOffset) {
		   var canvas = ctx.canvas ;
		   imgWidth = img.width / imgScale;
		   imgHeight = img.height / imgScale;
		   var hRatio = canvas.width  / imgWidth;
		   var vRatio =  canvas.height / imgHeight;
		   var ratio  = Math.min ( hRatio, vRatio );
		   var centerShift_x = ( canvas.width - img.width*ratio ) / 2;
		   var centerShift_y = (( canvas.height - img.height*ratio ) / 2) - yOffset;  
		   //ctx.clearRect(0,0,canvas.width, canvas.height);
		   ctx.drawImage(img, 0,0, imgWidth, imgHeight,
							  centerShift_x,centerShift_y,imgWidth*ratio, imgHeight*ratio);  
		}
		function drawText(ctx, txt, yOffset, lineOffset) {
			var x = 30;
			var y = 30;
			var lineheight = 15;
			var lines = txt.split(' ');
			var wordNum = 1;
			var currentLine = lines[0];
			
			ctx.font="normal 16px Arial, Helvetica, sans-serif";
			
			while ((ctx.measureText(currentLine).width < ctx.canvas.width * 0.25) && (wordNum < lines.length))
			{
				currentLine += " " + lines[wordNum++];
			}
			
			var textDim = ctx.measureText(currentLine);
			ctx.fillText(currentLine, ctx.canvas.width/2-textDim.width/2, yOffset);
			
			currentLine = "";
			while ((ctx.measureText(currentLine).width < ctx.canvas.width * 0.2) && (wordNum < lines.length))
			{
				currentLine += " " + lines[wordNum++];
			}
			
			if (currentLine.length > 0)
			{
				textDim = ctx.measureText(currentLine);
				ctx.fillText(currentLine, ctx.canvas.width/2-textDim.width/2, yOffset+lineOffset);
			}
		}
		function downloadCanvas(link, canvasId, filename) {
			link.href = document.getElementById(canvasId).toDataURL();
			link.download = filename;
		}
		var showNonDumps = true; // Temporary until everything's tested
		function processAmiiboList(tagInfo) {
			var out = "";
			var data = [];
			var totalDumps = 0;
			
			if (tagInfo != null) {
				for(var i = 0; i < tagInfo.length; i++) {
					//console.log("Processing index " + i);
					var info = tagInfo[i];
					info['isdump'] = true;
					getAmiiboData(info);
					data.push(info);
				}
				totalDumps = tagInfo.length;
			}
				
			var tagInfos = Object.keys(amiiboDBJSON["amiibos"]);
			console.log("amiiboDB: total " + tagInfos.length + " amiibos.");
			
			if (showNonDumps) {			
				for (var i = 0; i < tagInfos.length; i++) {
					var info = {};
					info['id'] = tagInfos[i].replace("0x", "").toUpperCase();
					info['isdump'] = false;
					getAmiiboData(info);
					data.push(info);
				}
			}
			
			data.sort(compareAmiibo);
							
			if (urlParams["skip"] && !isNaN(urlParams["skip"])) {
				for (var i = 0; i < urlParams["skip"]; i++) {
					out += amiiboCardBlank();
				}
			}
			
			for (var i = 0; i < data.length; i++) {
				isdump = data[i]['isdump'];
				delete data[i]['isdump'];
				out += createAmiiboCard(data[i], null, true, true, isdump);
			}
			
			if (urlParams["print"]) {
				// Uncomment to print a blank entry at the end (used to for label templates)
				//out += amiiboCardPrint({'name': '', 'id': ''}, false);
			}
			
			document.getElementById("amiiboList").innerHTML = out;
			document.getElementById("amiiboCount").innerHTML = "Total: " + totalDumps + " amiibos.";
			
			if (urlParams["print"]) {
				Array.prototype.forEach.call(document.getElementsByClassName("print-canvas"), (elem) => {
					info['id'] = elem.id;
					var imgURL = "";
					var mainName = "";
					if (elem.id !== "")
					{
						mainName = getAmiiboMainName(info);
						imgURL = imageURLFromInfo(elem.id);
					}
								
					var ctx = elem.getContext("2d");
					ctx.canvas.width = ctx.canvas.parentNode.parentNode.clientHeight*1.1;
					ctx.canvas.height = ctx.canvas.parentNode.parentNode.clientHeight*1.1;
					
					//ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
					var grd=ctx.createRadialGradient(ctx.canvas.width/2,ctx.canvas.height/2,2,ctx.canvas.width/4,ctx.canvas.height/4,ctx.canvas.width);
					grd.addColorStop(0,"lightblue");
					grd.addColorStop(1,"white");
					ctx.arc(ctx.canvas.width/2,ctx.canvas.height/2, 75, 0, 2 * Math.PI);
					ctx.fillStyle=grd;
					ctx.fill();
					
					ctx.fillStyle = "#000";
					ctx.lineWidth=1;
					ctx.fillStyle="#000000";
					ctx.lineStyle="#000000";
					if (urlParams["print"] !== "notext")
						drawText(ctx, mainName, 120, 18);
					
					if (mainName !== "")
						ctx.canvas.parentNode.download = mainName + ".png";
					
					if (imgURL !== "")
					{
						var img = new Image();
						img.crossOrigin="Anonymous";
						img.onload = function () {
							drawImageScaled(img, ctx, 0.5, 22);
							ctx.canvas.parentNode.href = ctx.canvas.toDataURL();
						};
						img.src = imgURL;
					}

					//ctx.canvas.parentNode.href = ctx.canvas.toDataURL();
				});
			}
			
			if ((filters != null) && (Object.keys(filters).length > 0)){
				console.log("Filtering results.");
				renderFilterResults(filters);
			}
			else {
				console.log("Clearing filters.");
				renderFilterResults(null);
			}
		}
		function renderSinglePage(elementID, data) {
			Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => { elem.innerHTML = ""; });
			var page = document.getElementById(elementID);
			page.style.display = 'block';
			if (page.className.indexOf('visible') === -1) {
				page.className += ' visible';
			}
			checkGetFileInfo();
		}
		function renderErrorPage(data){
			// Hides and shows products in the All Products Page depending on the data it recieves.
		}

		function hasClass(element, cls) {
			return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
		}
		
		function cancelread() {
			Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
				elem.innerHTML = "";
			});
			sendAmiiboFunc('cancelread', true);
		}

		function sendwifiinfo() {
			var ssid = document.getElementById("wifissid").value;
			var passkey = document.getElementById("wifipasskey").value;
			
			var msg = { 
				"func":"configurewifi",
				"ssid":ssid,
				"passkey":passkey
			};
			
			console.log("Sending wifi config: " + JSON.stringify(msg));
			connection.send(JSON.stringify(msg));
		}
		function sendAmiiboFunc(funcName, clearData) {
			setProgress(0);
			if (clearData === true) {
				Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => { elem.innerHTML = ""; });
			}
			Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = ""; });
			console.log(funcName);
			var msg = { "func":funcName };
			connection.send(JSON.stringify(msg));
		}
		
		function sendAmiiboFuncWithFilename(funcName, clearData){
			var search = parseQuery(window.location.search);
			var filename = search["filename"];
			
			setProgress(0);
			if (clearData === true) {
				Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => { elem.innerHTML = ""; });
			}
			Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = ""; });
			if ((filename != null) && (filename.length > 0)) {
				console.log(funcName);
				var msg = { "func":funcName, "filename":filename };
				connection.send(JSON.stringify(msg));
			}
		}
		
		function sendAmiiboFuncWithID(funcName, clearData){
			var search = parseQuery(window.location.search);
			var id = search["id"];
			
			setProgress(0);
			if (clearData === true) {
				Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => { elem.innerHTML = ""; });
			}
			Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = ""; });
			if ((id != null) && (id.length > 0)) {
				console.log(funcName);
				var msg = { "func":funcName, "id":id };
				connection.send(JSON.stringify(msg));
			}
		}
		/* Toggle between adding and removing the "responsive" class to topnav when the user clicks on the icon */
		function myFunction() {
			var x = document.getElementById("myTopnav");
			if (x.className === "topnav") {
				x.className += " responsive";
			} else {
				x.className = "topnav";
			}
		}
		function getQueryFilename() {
			var search = parseQuery(window.location.search);
			return search["filename"];
		}
		function getQueryID() {
			var search = parseQuery(window.location.search);
			return search["id"];
		}
		function parseQuery(search) {
			var args = search.substring(1).split('&');
			var argsParsed = {};
			var i, arg, kvp, key, value;

			for (i=0; i < args.length; i++) {
				arg = args[i];
				if (-1 === arg.indexOf('=')) {
					argsParsed[decodeURIComponent(arg).trim()] = true;
				}
				else {
					kvp = arg.split('=');
					key = decodeURIComponent(kvp[0]).trim();
					value = decodeURIComponent(kvp[1]).trim();
					argsParsed[key] = value;
				}
			}

			return argsParsed;
		}
		function closemodal(e, force)
		{
			Array.prototype.forEach.call(document.getElementsByClassName("single-product"), (elem) => { 
				if (hasClass(elem, 'visible')) {
					var clicked = event.target || event.srcElement;
					// If the close button or the background are clicked go to the previous page.
					if (hasClass(clicked, 'close') || hasClass(clicked, 'overlay') || force) {
						if (suppressRefresh) {
							//var page = document.getElementById(elem);
							//page.style.display = 'block';
							if (elem.className.indexOf('visible') != -1) {
								elem.classList.remove('visible');
							}
						}
						//else {
							//window.history.replaceState({}, 'Wifiibo', ''); windowHashChange();
							//window.location.hash = '#';
							if (suppressRefresh) {
								var historyObj = document.referrer;
								window.history.replaceState({}, 'Wifiibo', window.location.origin + window.location.pathname);
								window.location.hash = getQueryHash(filters);
								//render();
							}
							else {
								// Change the url hash with the last used filters.
								createQueryHash(filters);
								window.location.search = '';
								windowHashChange();
							}
							if (forceRefresh) {
								windowHashChange();
							}
						//}
					}
				}
			});
			suppressRefresh = false;
		}
		function createFileUploader(element, tree, editor){
			var xmlHttp;
			var input = document.createElement("input");
			input.type = "file";
			input.multiple = true;
			input.name = "data";
			document.getElementById(element).appendChild(input);
			var path = document.createElement("input");
			path.id = "upload-path";
			path.type = "text";
			path.name = "path";
			path.defaultValue = "/";
			path.hidden = true;
			document.getElementById(element).appendChild(path);
			var button = document.createElement("button");
			button.innerHTML = 'Upload';
			document.getElementById(element).appendChild(button);
			fileIndex = 0;

			function uploadFile() {
				if (fileIndex >= input.files.length) {
					windowHashChange();
					return;
				}
				file = input.files[fileIndex++];
				xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = function() {
					if (xmlHttp.readyState === XMLHttpRequest.DONE) {
						if (xmlHttp.status !== 200) 
							console.log("ERROR["+xmlHttp.status+"]: "+xmlHttp.responseText);
						else
							uploadFile();
			  		}
				}
				var formData = new FormData();
				var pathStr = getPath(file.name);
				formData.append("data", file, pathStr);
				path.value = pathStr;
				console.log("Uploading " + pathStr);
				xmlHttp.open("POST", 'http://'+getHost()+'/uploadAmiibo');
				xmlHttp.send(formData);
			}

			function httpPostProcessRequest(){
			  if (xmlHttp.readyState === 4) {
					if (xmlHttp.status !== 200) 
						alert("ERROR["+xmlHttp.status+"]: "+xmlHttp.responseText);
					else {
						uploadFile();
					}
			  }
			}
			button.onclick = function(e){
			  //if(input.files.length === 0){
				//	return;
			  //}
			  fileIndex = 0;
			  uploadFile();
			  //for (i = 0; i < input.files.length; i++) {
				//uploadFile(inputs.files[i]);
			  //}
			  /*
			  Array.prototype.forEach.call(input.files, (file) => {
				xmlHttp = new XMLHttpRequest();
				xmlHttp.onreadystatechange = httpPostProcessRequest;
				var formData = new FormData();
				var pathStr = getPath(file.name);
				formData.append("data", file, getPath(file));
				xmlHttp.open("POST", 'http://'+getHost()+'/uploadAmiibo');
				xmlHttp.send(formData);
			  });
			  */
			  /*
			  xmlHttp = new XMLHttpRequest();
			  xmlHttp.onreadystatechange = httpPostProcessRequest;
			  var formData = new FormData();
			  formData.append("data", input.files[0], path.value);
			  xmlHttp.open("POST", 'http://'+getHost()+'/uploadAmiibo');
			  xmlHttp.send(formData);
			  */
			  //windowHashChange();
			};
			/*
			input.onchange = function(e){
			  if (input.files.length === 0)
					return;
			  var filename = input.files[0].name;
			  verifyFilename(path, filename);
			}
			*/
		}
		function getPath(filename) {
			var filenameMaxLen = 32-1-1-4;
			var ext = /(?:\.([^.]+))?$/.exec(filename)[1];
			var name = /(.*)\.[^.]+$/.exec(filename)[1];
			if (typeof name !== "undefined") {
					if(name.length > filenameMaxLen) 
						name = name.substring(0, filenameMaxLen);
					filename = name;
			}
			if (typeof ext !== "undefined") {
					filename = filename + "." + ext;
			}
			return "/" + filename;
		}
		function verifyFilename(path, filename) {
		  var filenameMaxLen = 32-1-1-4;
		  var ext = /(?:\.([^.]+))?$/.exec(filename)[1];
		  var name = /(.*)\.[^.]+$/.exec(filename)[1];
		  if (typeof name !== "undefined") {
				if(name.length > filenameMaxLen) 
					name = name.substring(0, filenameMaxLen);
				filename = name;
		  }
		  if (typeof ext !== "undefined") {
				filename = filename + "." + ext;
		  }
		  if(path.value === "/" || path.value.lastIndexOf("/") === 0)	{
				path.value = "/"+filename;
		  } 
			else {
				path.value = path.value.substring(0, path.value.lastIndexOf("/")+1)+filename;
		  }
		}
		function hashCode(str) {
			return str.split('').reduce((prevHash, currVal) =>
				(((prevHash << 5) - prevHash) + currVal.charCodeAt(0))|0, 0);
		}
		function uploadkeydata() {
			var keyText = document.getElementById("retail-key-text").value.replace(/[^A-Fa-f0-9]/g, "");
			var hashOK = false;
			var lengthOK = false;
			
			if ((keyText.length > 320) && (keyText.toUpperCase().startsWith("1D"))) {
				keyText = keyText.substring(0, 320);
			}
			
			if (hashCode(keyText) === -1217838864) {
				hashOK = true;
			}
			
			if (keyText.length == 320) {
				lengthOK = true;
			}
			document.getElementById("retail-key-text").value = keyText;
			
			if (lengthOK && hashOK) {
				Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Key length OK, hash OK, uploading..."; });
				var data = new Uint8Array(160);
				
				for (var i = 0; i < keyText.length; i+=2) {
					data[i/2] = parseInt(keyText.substring(i, i+2), 16);
				}
				
				var blob = new Blob([data], {type: 'application/octet-stream'});
				
				xmlHttp = new XMLHttpRequest();
				//xmlHttp.onreadystatechange = httpPostProcessRequest;
				var formData = new FormData();
				formData.append("data", blob, 'key_retail.bin');
				xmlHttp.open("POST", 'http://'+getHost()+'/uploadAmiibo');
				xmlHttp.send(formData);
				windowHashChange();
			}
			else if (!lengthOK) {
				Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Error: key length is invalid; should be 320 hex characters, but is " + keyText.length + "."; });
			}
			else if (!hashOK) {
				Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => { elem.innerHTML = "Error: key hash mismatch (key is invalid)."; });
			}
		}
		function generateDumpFilter() {
			var html = "";
			var checked = "";
			var Title = "Show Only Local Dumps";
			var val = "true";
			html += '<div class="filter-criteria">';
			//html += '<span></span>';
			
			var currentChecks = null;
			
			if ((filters['localdumpsonly'] != null) && (filters['localdumpsonly'].length > 0)) {
				if (Object.values(filters['localdumpsonly'])[0].toLowerCase() == "true") {
					checked = "checked";
				}
				console.log("generateDumpFilter: Matched filter.");
			}
			
			//checked = "checked";
			
			html+= '<label><input class="filtercheckbox" type="checkbox" name="localdumpsonly" value="'+val+'" onclick="filtercheckboxClick(this)" '+checked+'>'+Title+'</label>'
			
			html += '</div>';
			return html;
		}
		function generateFilterEntry(title, dbval) {
			var lookup = {}; // Avoids duplicates
			var html = "";
			html += '<div class="filter-criteria">';
			html += '<span>'+title+'</span>';
			//var foundDBVal = amiiboDBJSON[dbval];
			var foundDBVal = Object.values(amiiboDBJSON[dbval]);
			foundDBVal.sort();
			
			var currentChecks = null;
			
			if (filters[title] != null) {
				currentChecks = Object.values(filters[title]);
				console.log("generateFilterEntry: Matched filter.");
			}
			
			for(i in foundDBVal) {
				var val = foundDBVal[i];
				if (!(val in lookup)) {
					lookup[val] = 1; // Avoid duplicates
					var checked = "";
					if (currentChecks != null && currentChecks.includes(val)) {
						checked = "checked";
					}
					html+= '<label><input class="filtercheckbox" type="checkbox" name="'+title+'" value="'+val+'" onclick="filtercheckboxClick(this)" '+checked+'>'+val+'</label>'
				}
			}
			html += '</div>';
			return html;
		}
		function clearFilters() {
			Array.prototype.forEach.call(document.getElementsByClassName("filtercheckbox"), (elem) => { elem.checked = false; });
			filters = {};
			createQueryHash(filters);
			window.location.search = '';
			window.location.hash = '#';
		}
		function generateFilters() {
			var html = "";
			html += '<button onclick="clearFilters()">Clear filters</button>';
			//html += generateDumpFilter();
			html += generateFilterEntry('amiibo Series', 'amiibo_series');
			html += generateFilterEntry('Game Series', 'game_series');
			html += generateFilterEntry('Form', 'types');
			
			document.getElementById('filterForm').innerHTML = html;
		}
		function generateSingleProductHTML() {
			document.getElementById('read-amiibo').addEventListener("click", closemodal);
			document.getElementById('read-amiibo').innerHTML = singleProductPageHTML("Read amiibo", "read-amiibo", "sendAmiiboFunc('readnfc', true)", "cancelread()", true);
			
			document.getElementById('write-amiibo').addEventListener("click", function(e) {
				suppressRefresh = true;
				closemodal(e);
			});
			document.getElementById('write-amiibo').innerHTML = singleProductPageHTML("Write amiibo", "write-amiibo", "sendAmiiboFuncWithFilename('writenfc', false)", "sendAmiiboFunc('cancelwrite', false)");

			document.getElementById('create-amiibo').addEventListener("click", function(e) {
				suppressRefresh = true;
				closemodal(e);
			});
			document.getElementById('create-amiibo').innerHTML = singleProductPageHTML("Create amiibo", "create-amiibo", "sendAmiiboFuncWithID('createamiibo', false)", "sendAmiiboFunc('cancelwrite', false)");
			
			document.getElementById('delete-amiibo').addEventListener("click", closemodal);
			document.getElementById('delete-amiibo').innerHTML = singleProductPageHTML("Delete amiibo", "delete-amiibo", "sendAmiiboFuncWithFilename('deleteamiibo', true)", "closemodal(null, true)");
			
			document.getElementById('upload-amiibo').addEventListener("click", closemodal);
			document.getElementById('upload-retail-keys').addEventListener("click", closemodal);
			document.getElementById('configure-wifi').addEventListener("click", closemodal);
		}
		function openNav() {
			document.getElementById("mySidenav").style.width = "330px";
			document.getElementById("main").style.marginLeft = "330px";
		}
		function closeNav() {
			document.getElementById("mySidenav").style.width = "0";
			document.getElementById("main").style.marginLeft = "0";
		}
		function onBodyLoad() {
			getURLParams();
			windowHashChange();
			getAmiiboJSONDB();

			createFileUploader("uploader");
			generateSingleProductHTML();
			document.getElementById("toggleprint").checked = urlParams["print"];
		}
		function removeParam(key, sourceURL) {
			var rtn = sourceURL.split("?")[0],
				param,
				params_arr = [],
				queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
			if (queryString !== "") {
				params_arr = queryString.split("&");
				for (var i = params_arr.length - 1; i >= 0; i -= 1) {
					param = params_arr[i].split("=")[0];
					if (param === key) {
						params_arr.splice(i, 1);
					}
				}
				rtn = rtn + "?" + params_arr.join("&");
			}
			return rtn;
		}
		function insertParam(key, value) {
			key = encodeURIComponent(key); value = encodeURIComponent(value);

			var kvp = document.location.search.substr(1).split('&');
			if (kvp === '') {
				document.location.search = '?' + key + '=' + value;
			}
			else {

				var i = kvp.length; var x; while (i--) {
					x = kvp[i].split('=');

					if (x[0] === key) {
						x[1] = value;
						kvp[i] = x.join('=');
						break;
					}
				}

				if (i < 0) { kvp[kvp.length] = [key, value].join('='); }

				//this will reload the page, it's likely better to store this until finished
				document.location.search = kvp.join('&');
			}
		}
		function toggleprint(elem) {
			if (urlParams["print"]) {
				window.location.search = removeParam("print", window.location.search);
			}
			else {
				insertParam("print", "true");
			}
		}
		function getURLParams() {
			var match,
				pl     = /\+/g,  // Regex for replacing addition symbol with a space
				search = /([^&=]+)=?([^&]*)/g,
				decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
				query  = window.location.search.substring(1);

			urlParams = {};
			while (match = search.exec(query))
			   urlParams[decode(match[1])] = decode(match[2]);
		}
		//(window.onpopstate = function () {
		//	var match,
		//		pl     = /\+/g,  // Regex for replacing addition symbol with a space
		//		search = /([^&=]+)=?([^&]*)/g,
		//		decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
		//		query  = window.location.search.substring(1);
        //
		//	urlParams = {};
		//	while (match = search.exec(query))
		//	   urlParams[decode(match[1])] = decode(match[2]);
		//})();
		</script>
	</head>

<body onload="onBodyLoad();">

	<header class="compact">
		<h1 style="font-size:25px;cursor:pointer" onclick="openNav()">&#9776;</h1>
		<h1><a href="#">Wifiibo</a></h1>
		<button onclick="window.location.href='#readamiibo'">Read amiibo</button>
		<button onclick="window.location.href='#uploadamiibo'">Upload amiibo</button>
		<button onclick="window.location.href='#uploadretailkeys'" id="upload-button">Upload keys</button>
		<button onclick="window.location.href='#configurewifi'" id="configurewifi-button">Configure Wifi</button>
		<div id="alturl"></div><br/>
		<div id="nfcversion">NFC:(Unknown)</div>
		<div id="version">Version</div>
		<div id="statusMessage" class="status-style"></div>
		<!--button onclick="openNav()">Filters</button-->	
	</header>
	
	<div class="sidenav" id="mySidenav">
		<a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
		<div class="filters" style="margin-bottom: 10px; padding: 10px">
			<div class="filter-options" style="margin: 0px;">
				<span style="margin-top: 5px;">View Options</span>
				<label><input type="checkbox" id="toggleprint" name="toggleprint" value="toggleprint" onclick="toggleprint(this)">Print View</label>
			</div>
		</div>
		<div class="filters" style="margin-bottom: 60px">
			<form id="filterForm"></form>
		</div>
	</div>

	<div class="main-content" id="main">
		<div class="all-products">
			<ul class="products-list" id="amiiboList"></ul>
			<div class="amiibo-count" id="amiiboCount"></div>
		</div>

		<div class="single-product save-file page" id="read-amiibo"></div>
		<div class="single-product page" id="write-amiibo"></div>
		<div class="single-product page" id="create-amiibo"></div>
		<div class="single-product page" id="delete-amiibo"></div>
		<div class="single-product page" id="upload-amiibo">
			<div class="overlay"></div>
			<div class="preview-large">
			<h3>Upload amiibo</h3>
			<div>
				<div id="uploader"></div>
			</div>
			<br/>
			<div>
				<span class="statusInfo"></span>
				<div class="tag-percent">
					<div class="readWriteProgress">
						<div class="readWriteProgressBar"></div>
					</div>
					<br/>
				</div>
			</div>
			<ul class="products-list amiiboData" style="opacity:100; margin-left:0px;">
			</ul>
			<span class="close">×</span>
			</div>
		</div>
		<div class="single-product page" id="upload-retail-keys">
			<div class="overlay"></div>
			<div class="preview-large">
			<h3>Upload Retail Keys</h3>
			<div>
				To find keys, Google search for:<br/>
				<b>Use this to Encrypt your custom Amiibo NTag pastebin</b><br/><br/>
				Paste everything after <br/>"paste this in your Favorite Hex Editor and save it as a bin!" here:<br/>
				<textarea id="retail-key-text" rows="10" cols="50"></textarea><br/>
				<button onclick="uploadkeydata()">Submit</button>
			</div>
			<br/>
			<div>
				<span class="statusInfo"></span>
				<div class="tag-percent">
					<div class="readWriteProgress">
						<div class="readWriteProgressBar"></div>
					</div>
					<br/>
				</div>
			</div>
			<span class="close">×</span>
			</div>
		</div>
		<div class="single-product page" id="configure-wifi">
			<div class="overlay"></div>
			<div class="preview-large">
			<h3>Configure WiFi</h3>
			<div>
				<form>
					SSID: <input type="text" name="ssid" id="wifissid"><br/>
					Passkey: <input type="text" name="passkey" id="wifipasskey"><br/>
					<button onclick="sendwifiinfo()">Submit</button><br/><br/>
					<button onclick="triggerWifiScan(); return false;">Scan Wifi</button>
				</form>
			</div>
			<div>
				<span class="statusInfo"></span>
			</div>
			<div id="scanresults"></div>
			<span class="close">×</span>
			</div>
		</div>
		<div class="single-product page">
			<div class="overlay"></div>
			<div class="preview-large">
				<h3>Single product view</h3>
				<img src=""/>
				<p></p>
				<span class="close">×</span>
			</div>
		</div>
		<div class="error page">
			<h3>Sorry, something went wrong :(</h3>
		</div>
	</div>
</body>
</html>