<!DOCTYPE html>
<html>
<head>
    <title>Wifiibo</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">

    <style>
        * {
            margin: 0;
            padding: 0;
        }

        body {
            font: normal 16px Arial, Helvetica, sans-serif;
        }

        h1, h3 {
            font: normal 32px 'Open Sans', Arial, Helvetica, sans-serif;
            vertical-align: middle;
            display: inline-block;
            margin: 0px 15px 0px 0px;
        }

        #alturl {
            float: right;
            vertical-align: middle;
            margin: 5px 0px 0px 0px;
            display: none;
        }

        #version {
            float: right;
            margin: -15px 0px 0px 0px;
            display: none;
        }

        #upload-button {
            display: none;
            background-color: #f44242;
        }

        button {
            border-radius: 2px;
            background-color: #87bae1;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
            border: 0;
            color: #ffffff;
            font-weight: bold;
            font-size: 13px;
            cursor: pointer;
            margin: 2px;

            width: 105px;
            height: 32px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            text-align: left;
            padding: 8px;
            margin: 10px 10px 10px 10px;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2
        }

        th {
            background-color: #87bae1;
            color: white;
        }

        /*-----------------
            The Header
        ------------------*/

        header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;

            height: 40px;
            z-index: 100;

            background-color: #282b2c;
            padding: 20px 40px;
            color: #fff;
            box-shadow: 0px 3px 2px rgba(0, 0, 0, 0.1);
        }

        header a {
            color: #ffffff;
            text-decoration: none;
        }

        @media (max-width: 500px) {

            header {
                padding: 20px 15px;
            }

            header h1 {
                font-size: 24px;
                margin: 0;
            }

        }

        /*-----------------
            Main Content
        ------------------*/

        input[type=text] {
            padding: 5px 10px 5px 5px;
            border: 2px solid #ccc;
            -webkit-border-radius: 2px;
            border-radius: 2px;
        }

        .main-content {
            box-sizing: border-box;
            text-align: center;
            margin: 80px auto 60px;
            padding: 0 40px;
        }

        .main-content h3 {
            font-size: 28px;
            color: #5a96b9;
            padding-bottom: 20px;
        }

        @media (max-width: 600px) {

            .main-content {
                margin: 45px auto;
                padding: 0 25px;
            }

        }

        /*-------------------
            All Products Page
        --------------------*/

        /*	Filter Form	*/

        .filters {
            box-sizing: border-box;
            padding: 5px 30px 30px;
            margin: 20px 20px 100px;
            width: 260px;
            background-color: #FFF;
            border: 1px solid #DBE3E7;
            border-radius: 3px;
            box-shadow: 1px 3px 1px rgba(0, 0, 0, 0.08);
            text-align: left;
            color: #2B2E31;
            opacity: 1;
        }

        .filters .filter-criteria {
            display: block;
            margin: 10px 0 10px;
        }

        .filters span {
            font-size: 14px;
            display: block;
            margin-bottom: 12px;
            font-weight: bold;
            margin-top: 20px;
        }

        .filters label {
            display: block;
            line-height: 1.4;
            font-size: 15px;
        }

        .filters label input {
            margin-right: 10px;
        }

        .filters button {
            border-radius: 2px;
            background-color: #4BC34B;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
            border: 0;
            color: #ffffff;
            font-weight: bold;
            font-size: 13px;
            cursor: pointer;

            width: 125px;
            height: 32px;
            margin-top: 10px;
        }

        /*	Products List	*/

        .all-products h3 {
            opacity: 0;
        }

        .products-list {
            list-style: none;
            margin-left: 25px;
            margin-right: 25px;
            text-align: center;
            padding: 0;
            opacity: 0;
            font-size: 0;
        }

        .all-products.visible .products-list,
        .all-products.visible .filters,
        .all-products.visible h3 {
            opacity: 1;
            transition: 1s;
            pointer-events: auto;
        }

        .products-list > li {
            box-sizing: border-box;
            display: inline-block;
            cursor: pointer;
            position: relative;
            transition: 0.2s;

            text-align: left;
            font: normal 12px sans-serif;

            background-color: #ffffff;
            border: 1px solid #dbe3e7;
            border-radius: 3px;
            box-shadow: 1px 3px 1px rgba(0, 0, 0, 0.08);

            margin: 0 12px 14px 0;
            padding: 25px;
        }

        /* The product image */

        img {
            max-height: 90%;
            max-width: 90%;
            width: auto;
            height: auto;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
        }

        /* The product name */

        .products-list h2 {
            display: block;
            font-size: 18px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 240px;
            margin: 0;
            text-align: center;
        }

        .products-list h2 a {
            text-decoration: none;
            color: #2B2E31;
        }

        /* Product description */

        .products-list .product-description li {
            margin-right: 5px;
        }

        .products-list .product-description li:first-child {
            display: block;
        }

        .products-list .product-description li span {
            font-weight: bold;
        }

        /* Price and order button */

        .products-list button {
            border-radius: 2px;
            background-color: #87bae1;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12);
            border: 0;
            color: #ffffff;
            font-weight: bold;
            font-size: 13px;
            cursor: pointer;

            width: 95px;
            height: 32px;
        }

        /*---------------------------
            Single Product Page
        ----------------------------*/

        .single-product {
            z-index: 100;
        }

        .overlay {
            height: 20px;
            width: 100%;
            position: fixed;
            top: 0;
            left: 0;
            background-color: #282b2c;
            transition: 0.6s;
            z-index: 100;
        }

        .single-product.visible .overlay {
            height: 100%;
        }

        .preview-large {
            box-sizing: border-box;
            width: 560px;
            height: 700px;
            position: fixed;
            left: 50%;
            margin-left: -275px;
            top: 50%;
            margin-top: -375px;
            pointer-events: none;

            border-radius: 6px;
            background-color: #ffffff;

            z-index: 102;
            opacity: 0;
            transition: 0.4s;

        }

        .single-product.visible .preview-large {
            opacity: 1;
            transition: 1.4s;
            pointer-events: auto;
        }

        .preview-large h3 {
            margin-top: 20px;
        }

        .preview-large img {
            width: 100%;
            height: 280px;
            border-bottom: 3px solid #efefef;
            border-radius: 5px 5px 0 0;
        }

        .preview-large p {
            line-height: 23px;
            padding: 50px 45px;
        }

        .close {
            position: absolute;
            right: 25px;
            top: 15px;

            font-size: 28px;
            color: #555;
            cursor: pointer;
        }

        /*---------------------------
            Error Page
        ----------------------------*/

        .error {
            opacity: 0;
            transition: 0.6s;
            pointer-events: none;
            position: absolute;
            left: 0;
            top: 100px;
            width: 100%;
        }

        .error h3 {
            font-size: 40px;
        }

        .statusInfo {
            opacity: 1;
        }

        .readWriteProgress {
            width: 100%;
            background-color: #ddd;
        }

        .readWriteProgressBar {
            width: 0%;
            height: 4px;
            background-color: #33b5e5;
            text-align: center;
            line-height: 4px;
            color: white;
        }

        /*-----------------------------
            Side Nav
        ------------------------------*/
        .sidenav {
            height: 100%;
            width: 0;
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            background-color: #aaaaaa;
            overflow-x: hidden;
            transition: 0.5s;
            padding-top: 80px;
        }

        .sidenav a {
            padding: 8px 8px 8px 32px;
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
            transition: 0.3s;
        }

        .sidenav a:hover {
            color: #f1f1f1;
        }

        .sidenav .closebtn {
            float: right;
            top: 0;
            right: 15px;
            font-size: 36px;
            margin-left: 5px;
        }

        .print-canvas {
            height: 100%;
            width: 100%;
        }

        #main {
            transition: margin-left .5s;
            padding: 16px;
        }

        .extra-margin {
            display: none;
        }

        @page {
            size: letter;
            margin-top: 0in;
            margin-left: 0.34in;
        }

        @media print {
            .no-print, .no-print * {
                display: none !important;
            }

            header {
                display: none;
            }

            .main-content {
                padding: 0px;
                margin: 0px auto 0px 0px;

            }

            .sidenav {
                display: none;
            }

            #main {
                padding: 0px;
            }

            #container #content {
                width: 100%;
                margin: 0px;
                padding: 0px;
            }

            .print-border-empty {
                align-content: center;
                height: 100%;
                width: 100%;
            }

            .print-border {
                align-content: center;
                height: 100%;
                width: 100%;
            }

            .products-list {
                text-align: left;
                margin: 0px;
            }

            .products-list > li {
                box-sizing: unset;
                border: none;
                border-radius: 0px;
                box-shadow: none;
                display: inline-block;
                height: 1.5in;
                width: 1.5in;

                margin: 0.25in;
                padding: 0px;
            }

            .products-list .product-photo {
                display: block;
                width: 100%;
                height: 100%;
                text-align: center;
                border: none;
                box-shadow: none;
                max-width: 100%;
                max-height: 100%;
                margin: -5px auto 0px;
            }

            .products-list .product-description {
                display: none;
            }

            .extra-margin {
                display: inline-block;
                margin-top: 5px;
            }

            /* The product name */
            .products-list h2 {
                display: block;
                font-size: 11px;
                white-space: normal;
                overflow: hidden;
                text-overflow: ellipsis;
                width: 60%;
                max-width: 100%;
                margin: 0px 30px;
                text-align: center;
                height: 19%;
            }

            .products-list .product-description li {
                display: none;
            }

            .products-list .product-description li:first-child {
                display: none;
            }

            .products-list .product-description li span {
                display: none;
            }

            /* Price and order button */
            .products-list button {
                display: none;
            }
        }

    </style>
    <script>
        const amiiboCardBlank = () => `
            <li>
                <div class="print-border" style="background:none">
                </div>
            </li>
        `;

        const amiiboCardPrint = (taginfo, filterable) => `
            <li ${(filterable) ? `class="data-index" data-index="${taginfo["filename"]}"` : ``}>
                <div class="print-border">
                <a>
                <canvas class="print-canvas" id="${taginfo["id"]}"></canvas>
                </a>
                <div class="extra-margin"></div>
                <ul class="product-description" style="display: none">
                    ${Object.keys(taginfo).map((name, val) => `<li data-filterkey="${name}" data-filtervalue="${decodeURIComponent(taginfo[name])}"><span>${name.charAt(0).toUpperCase() + name.slice(1)}: </span>${decodeURIComponent(taginfo[name])}</li>\n`).join('')}
                </ul>
                </div>
            </li>
        `;

        const amiiboCard3 = (taginfo, title, img, imgTags, showButtons, filterable) => `
            <li ${(filterable) ? `class="data-index" data-index="${taginfo["filename"]}"` : ``}>
                <div class="print-border">
                <div class="extra-margin"></div>
                ${(img != null) ? `<a href="#" class="product-photo"><img src="${img}" ${imgTags} alt="Image not found"/></a>` : ``}
                <h2><a href="#">${title}</a></h2>
                <ul class="product-description">
                    ${Object.keys(taginfo).map((name, val) => `<li data-filterkey="${name}" data-filtervalue="${decodeURIComponent(taginfo[name])}"><span>${name.charAt(0).toUpperCase() + name.slice(1)}: </span>${decodeURIComponent(taginfo[name])}</li>\n`).join('')}
                </ul>
                ${(showButtons) ? `
                <button onclick="window.location.href='?filename=${taginfo["filename"]}#writeamiibo'">Write Tag</button>
                <button onclick="window.location.href='?filename=${taginfo["filename"]}#deleteamiibo'">Delete</button>
                <form style="display:inline-block" method="get" action="${"http://" + getHost() + taginfo["filename"]}">
                    <button style="width:60px" type="submit">\u2B73</button>
                </form>
                ` : ``}
                </div>
            </li>
        `;

        const singleProductPageHTML = (title, btnClass, btnClick, btnCancelClick, showSaveFile) => `
            <div class="overlay"></div>
            <div class="preview-large">
                <h3>${title}</h3>
                <div>
                    <button class="${btnClass}" id="btnSingleProduct" onclick="${btnClick}">${title}</button>
                    ${(btnCancelClick != null) ? `<button id="btncancel" onclick="${btnCancelClick}">Cancel</button>` : ``}
                </div>
                <br/>
                ${(showSaveFile) ? '<div class="saveFile"></div>' : ''}
                <div>
                    <h4 style='display:inline'>Status:</h4>
                    <span class="statusInfo"></span>
                    <div class="tag-percent">
                        <div class="readWriteProgress">
                            <div class="readWriteProgressBar"></div>
                        </div>
                        <br/>
                    </div>
                </div>
                <ul class="products-list amiiboData" style="opacity:100; height: auto; margin: 0 auto;">
                </ul>
                <span class="close">×</span>
            </div>
        `;

        let connection = new WebSocket(getWSConnURL(), ['arduino']);
        let amiiboDBJSON;
        let lastAmiiboList;
        const amiiboJSONURL = 'https://raw.githubusercontent.com/N3evin/AmiiboAPI/master/database/amiibo.json';

        function getWSConnURL() {
            return 'ws://' + getHost() + '/ws';
        }

        function getHost() {
            let host = document.location.host;

            if (document.location.host === "") {
                host = '192.168.4.1';
            }

            return host;
        }

        function imageURLFromInfo(id) {
            return 'https://raw.githubusercontent.com/N3evin/AmiiboAPI/master/images/icon_' + id.substr(0, 8).toLowerCase() + '-' + id.substr(8, 8).toLowerCase() + '.png';
        }

        connection.onopen = function () {
            console.log('Connected to ' + getWSConnURL());

            sendAmiiboFunc('listamiibo');

            let filename = getQueryFilename();
            if (filename != null && filename.length > 0) {
                let msg = {"func": "getfileinfo", "filename": filename};
                console.log(msg);
                connection.send(JSON.stringify(msg));
            }
        };
        connection.onerror = function (error) {
            console.log('WebSocket Error ', error);
        };
        connection.onmessage = function (e) {
            let obj = JSON.parse(e.data);
            if (obj["status"] != null) {
                console.log("WS Status: " + obj["status"]);
                Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                    elem.innerHTML = obj["status"];
                });
            }
            if (obj["progress"] != null) {
                console.log("WS Progress: " + obj["progress"]);
                setProgress(obj["progress"]);
            }
            if (obj["taginfo"] != null) {
                console.log("WS TagInfo: " + obj["taginfo"]);
                let newHTML = createAmiiboCard(obj["taginfo"], 'style="height:100%;width:unset"', false);

                Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => {
                    elem.innerHTML = newHTML;
                    elem.className += ' visible';
                });

                Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
                    createSaveFileHTML(elem, '/' + getAmiiboMainName(obj["taginfo"]) + '.bin');
                    elem.className += ' visible';
                });
            }
            if (obj["tagInfoList"] != null) {
                getAmiiboJSONDB();
                let page = document.getElementsByClassName('all-products')[0];
                lastAmiiboList = obj["tagInfoList"];
                processAmiiboList(obj["tagInfoList"]);
                if (page.className.indexOf('visible') === -1) {
                    page.className += ' visible';
                }
            }
            if (obj["saveAmiibo"] != null) {
                if (obj["saveAmiibo"] >= 0) {
                    Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
                        elem.innerHTML = "";
                        elem.classList.remove('visible');
                    });
                }
            }
            if (obj["invalidkey"] != null) {
                document.getElementById('upload-button').style.display = "inline-block";
            }
            if (obj["validkey"] != null) {
                document.getElementById('upload-button').style.display = "none";
            }
            if (obj["wifistatus"] != null) {
                console.log("Wifi Status: " + obj["wifistatus"]);
                if (obj["scanresults"] != null) {
                    Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                        elem.innerHTML = "Scan complete.";
                    });
                    let elem = document.getElementById('scanresults');
                    if (elem != null) {
                        elem.innerHTML = createWifiInfoTableHTML(obj["scanresults"]);
                    }
                }
            }
            if (obj["serverip"] != null) {
                let elem = document.getElementById('alturl');
                if (elem != null) {
                    let loc = document.location;
                    let newURL = loc.protocol + '//' + obj["serverip"] + loc.pathname;
                    elem.innerHTML = '<a href="' + newURL + '">IP: ' + obj["serverip"] + '</a>';
                    elem.style.display = "inline-block";
                }
            }
            if (obj["version"] != null) {
                let elem = document.getElementById('version');
                if (elem != null) {
                    elem.innerHTML = "v" + obj["version"];
                    elem.style.display = "inline-block";
                }
            }
        };

        function createWifiInfoTableHTML(infoJSON) {
            console.log(infoJSON);
            let html = '';
            html += '<table>';

            html += '<tr>';
            html += '<th>' + 'SSID' + '</th>';
            html += '<th>' + 'RSSI' + '</th>';
            html += '<th>' + 'Encryption' + '</th>';
            html += '</tr>';

            for (let i = 0; i < infoJSON.length; i++) {
                let network = infoJSON[i];
                if ((network != null) &&
                    (network['ssid'] != null) &&
                    (network['ssid'] !== undefined) &&
                    (network['ssid'].length > 0)) {
                    html += '<tr>';
                    html += '<td><a href="javascript:setWifiSSIDField(\'' + network["ssid"] + '\')">' + network["ssid"] + '</a></td>';
                    html += '<td>' + network["rssi"] + '</td>';
                    html += '<td>' + ((network["encryptionType"] > 0) ? 'Secured' : 'Open') + '</td>';
                    html += '</tr>';
                }
            }

            html += '</table>';

            return html;
        }


        let filters = {};


        //	Event handlers for frontend navigation
        //	Checkbox filtering

        function filtercheckboxClick(elem) {
            let specName = elem.name;
            console.log("Filter checkbox clicked, name: " + specName);

            // When a checkbox is checked we need to write that in the filters object;
            if (elem.checked) {

                // If the filter for this specification isn't created yet - do it.
                if (!(filters[specName] && filters[specName].length)) {
                    filters[specName] = [];
                }

                //	Push values into the chosen filter array
                filters[specName].push(elem.value);

                // Change the url hash;
                createQueryHash(filters);

            }

            // When a checkbox is unchecked we need to remove its value from the filters object.
            if (!(elem.checked)) {

                if (filters[specName] && filters[specName].length && (filters[specName].indexOf(elem.value) !== -1)) {

                    // Find the checkbox value in the corresponding array inside the filters object.
                    let index = filters[specName].indexOf(elem.value);

                    // Remove it.
                    filters[specName].splice(index, 1);

                    // If it was the last remaining value for this specification,
                    // delete the whole array.
                    if (!filters[specName].length) {
                        delete filters[specName];
                    }

                }

                // Change the url hash;
                createQueryHash(filters);
            }
        }

        function createQueryHash(filters) {

            // Here we check if filters isn't empty.
            if (Object.keys(filters).length > 0) {
                // Stringify the object via JSON.stringify and write it after the '#filter' keyword.
                window.location.hash = '#filter/' + JSON.stringify(filters);
                console.log("Set hash to " + window.location.hash);
            }
            else {
                // If it's empty change the hash to '#' (the homepage).
                window.location.hash = '#';
                console.log("Filters is empty, len = " + filters.length);
                console.log(JSON.stringify(filters));
            }

        }

        function setProgress(pct) {
            Array.prototype.forEach.call(document.getElementsByClassName("readWriteProgressBar"), (elem) => {
                elem.style.width = pct + '%';
            });
            console.log(pct + '%');
        }

        function windowHashChange() {
            render(decodeURI(window.location.hash));
        }

        function render(url) {
            // Get the keyword from the url.
            let temp = url.split('/')[0];

            // Hide whatever page is currently shown.
            let i;
            let j;

            let main = document.getElementsByClassName("main-content");
            for (i = 0; i < main.length; i++) {
                let page = main[i].getElementsByClassName("page");
                for (j = 0; j < page.length; j++) {
                    page[j].style.display = 'none';
                }
            }

            let map = {
                // The Homepage.
                '': function () {
                    // Clear the filters object, uncheck all checkboxes, show all the products
                    filters = {};
                    Array.prototype.forEach.call(document.getElementsByClassName("filtercheckbox"), (elem) => {
                        elem.checked = false;
                    });
                    renderAmiiboListPage();
                },

                // Single Products page.
                '#readamiibo': function () {
                    renderSinglePage('read-amiibo');
                },

                '#writeamiibo': function () {
                    // Grab the string after the '#filter/' keyword. Call the filtering function.
                    let filename = url.split('#writeamiibo/')[1];
                    renderSinglePage('write-amiibo', filename);
                },

                '#deleteamiibo': function () {
                    // Grab the string after the '#filter/' keyword. Call the filtering function.
                    let filename = url.split('#deleteamiibo/')[1];
                    renderSinglePage('delete-amiibo', filename);
                },

                '#uploadamiibo': function () {
                    renderSinglePage('upload-amiibo');
                },

                '#uploadretailkeys': function () {
                    renderSinglePage('upload-retail-keys');
                },

                '#configurewifi': function () {
                    renderSinglePage('configure-wifi');
                },

                '#filter': function () {
                    // Grab the string after the '#filter/' keyword. Call the filtering function.
                    url = url.split('#filter/')[1].trim();

                    // Try and parse the filters object from the query string.
                    try {
                        filters = JSON.parse(url);
                    }
                        // If it isn't a valid json, go back to homepage ( the rest of the code won't be executed ).
                    catch (err) {
                        window.location.hash = '#';
                        return;
                    }
                    renderAmiiboListPage();
                }
            };

            // Execute the needed function depending on the url keyword (stored in temp).
            if (map[temp]) {
                map[temp]();
            }
            // If the keyword isn't listed in the above - render the error page.
            else {
                renderErrorPage();
            }
        }

        function triggerWifiScan() {
            try {
                sendAmiiboFunc('triggerScanWifi');
                Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                    elem.innerHTML = "Scanning Wifi networks...";
                });
            }
            catch (e) {
                Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                    elem.innerHTML = "Error during scan.";
                });
            }
        }

        function renderFilterResults(filters) {
            Array.prototype.forEach.call(document.getElementsByClassName("data-index"), (elem) => {
                let numMatchesRequired = Object.keys(filters).length;

                let matchedFilter = 0;
                let children = elem.getElementsByTagName("*");
                for (let child in children) {

                    if (children[child] && children[child].hasAttribute && children[child].hasAttribute("data-filterkey")) {
                        let key = children[child].getAttribute("data-filterkey");
                        let value = children[child].getAttribute("data-filtervalue");
                        if (filters[key] !== undefined) {
                            for (let i in filters[key]) {
                                if (filters[key][i] === value) {
                                    matchedFilter++;
                                }
                            }
                        }
                    }
                }

                if (matchedFilter < numMatchesRequired) {
                    elem.style.display = "none";
                    elem.classList.add('hidden');
                }
                else {
                    elem.classList.remove('hidden');
                }

            });
        }


        function getAmiiboJSONDB() {
            if (amiiboDBJSON == null) {
                let xmlhttp = new XMLHttpRequest();

                xmlhttp.onreadystatechange = function () {
                    if (this.readyState === XMLHttpRequest.DONE) {
                        if (this.status === 200) {
                            amiiboDBJSON = JSON.parse(this.responseText);
                            if (lastAmiiboList != null) {
                                processAmiiboList(lastAmiiboList);
                            }
                            console.log("Parsed Amiibo JSON DB.");
                            generateFilters();
                        } else {
                            // handle error
                        }
                    }
                };

                xmlhttp.open("GET", amiiboJSONURL, true);
                xmlhttp.send();
            }
        }

        function createSaveFileHTML(element, filename) {
            element.innerHTML = "";
            let input = document.createElement("input");
            input.type = "text";
            input.multiple = false;
            input.name = "data";

            element.appendChild(input);
            let button = document.createElement("button");
            button.innerHTML = 'Save amiibo';
            element.appendChild(button);

            verifyFilename(input, filename);

            button.onclick = function (e) {
                filename = input.value;
                if ((filename != null) && (filename.length > 0)) {
                    console.log('saveamiibo');
                    let msg = {"func": 'saveamiibo', "filename": filename};
                    connection.send(JSON.stringify(msg));
                }
                else {
                    console.log("Filename is null");
                }
            }
        }

        function getHexID(id) {
            return "0x" + id.toLowerCase()
        }

        function getAmiiboMainName(info) {
            let mainName = "(Unknown)";
            if ('id' in info && amiiboDBJSON != null) {
                let hexID = getHexID(info['id']);

                if (hexID in amiiboDBJSON['amiibos']) {
                    mainName = amiiboDBJSON['amiibos'][hexID]['name'];
                }
            }
            return mainName;
        }

        // Function modifies the info object!!!
        function getAmiiboData(info) {
            if ('id' in info) {
                let hexCharacter = "0x" + info['id'].substr(0, 4).toLowerCase();
                let hexForm = "0x" + info['id'].substr(6, 2).toLowerCase();
                let hexSeries = "0x" + info['id'].substr(12, 2).toLowerCase();
                let hexGameSeries = "0x" + info['id'].substr(0, 3).toLowerCase();

                if (amiiboDBJSON != null) {
                    if (hexSeries in amiiboDBJSON['amiibo_series']) {
                        info['amiibo Series'] = amiiboDBJSON['amiibo_series'][hexSeries];
                    }

                    if (hexCharacter in amiiboDBJSON['characters']) {
                        info['Character'] = amiiboDBJSON['characters'][hexCharacter];
                    }

                    if (hexGameSeries in amiiboDBJSON['game_series']) {
                        info['Game Series'] = amiiboDBJSON['game_series'][hexGameSeries];
                    }

                    if (hexForm in amiiboDBJSON['types']) {
                        info['Form'] = amiiboDBJSON['types'][hexForm];
                    }
                }
            }
        }

        function createAmiiboCard(info, imgTags, showButton, filterable) {
            let mainName = "";
            let imgURL = "";

            if ('id' in info) {
                imgURL = imageURLFromInfo(info["id"]);
                mainName = getAmiiboMainName(info);
                getAmiiboData(info);
            }

            if (urlParams["print"])
                return amiiboCardPrint(info, filterable);
            else
                return amiiboCard3(info, mainName, imgURL, imgTags, showButton, filterable);
        }

        function renderAmiiboListPage(data) {
            let page = document.getElementsByClassName('all-products')[0];

            page.style.display = 'block';

            try {
                sendAmiiboFunc('listamiibo');
            }
            catch (e) {
                console.log(e);
            }

            if (page.className.indexOf('visible') === -1) {
                page.className += ' visible';
            }
        }

        function compareAmiibo(a, b) {
            let aname = getAmiiboMainName(a);
            let bname = getAmiiboMainName(b);
            if (aname < bname)
                return -1;
            if (aname > bname)
                return 1;
            return 0;
        }

        function drawImageScaled(img, ctx, imgScale, yOffset) {
            let canvas = ctx.canvas;
            let imgWidth = img.width / imgScale;
            let imgHeight = img.height / imgScale;
            let hRatio = canvas.width / imgWidth;
            let vRatio = canvas.height / imgHeight;
            let ratio = Math.min(hRatio, vRatio);
            let centerShift_x = (canvas.width - img.width * ratio) / 2;
            let centerShift_y = ((canvas.height - img.height * ratio) / 2) - yOffset;

            ctx.drawImage(img, 0, 0, imgWidth, imgHeight,
                centerShift_x, centerShift_y, imgWidth * ratio, imgHeight * ratio);
        }

        function drawText(ctx, txt, yOffset, lineOffset) {
            let lines = txt.split(' ');
            let wordNum = 1;
            let currentLine = lines[0];

            ctx.font = "normal 16px Arial, Helvetica, sans-serif";

            while ((ctx.measureText(currentLine).width < ctx.canvas.width * 0.25) && (wordNum < lines.length)) {
                currentLine += " " + lines[wordNum++];
            }

            let textDim = ctx.measureText(currentLine);
            ctx.fillText(currentLine, ctx.canvas.width / 2 - textDim.width / 2, yOffset);

            currentLine = "";
            while ((ctx.measureText(currentLine).width < ctx.canvas.width * 0.2) && (wordNum < lines.length)) {
                currentLine += " " + lines[wordNum++];
            }

            if (currentLine.length > 0) {
                textDim = ctx.measureText(currentLine);
                ctx.fillText(currentLine, ctx.canvas.width / 2 - textDim.width / 2, yOffset + lineOffset);
            }
        }


        function processAmiiboList(tagInfo) {
            let out = "";
            let data = [];

            for (let i = 0; i < tagInfo.length; i++) {

                let info = tagInfo[i];
                getAmiiboData(info);
                data.push(info);
            }

            data.sort(compareAmiibo);


            if (urlParams["skip"] && !isNaN(urlParams["skip"])) {
                for (let i = 0; i < urlParams["skip"]; i++) {
                    out += amiiboCardBlank();
                }
            }

            for (let i = 0; i < data.length; i++) {
                out += createAmiiboCard(data[i], null, true, true);
            }

            document.getElementById("amiiboList").innerHTML = out;

            if (urlParams["print"]) {
                Array.prototype.forEach.call(document.getElementsByClassName("print-canvas"), (elem) => {
                    console.log("test");
                    info['id'] = elem.id;
                    mainName = getAmiiboMainName(info);
                    imgURL = imageURLFromInfo(elem.id);

                    let ctx = elem.getContext("2d");
                    ctx.canvas.width = ctx.canvas.parentNode.parentNode.clientHeight * 1.1;
                    ctx.canvas.height = ctx.canvas.parentNode.parentNode.clientHeight * 1.1;

                    let grd = ctx.createRadialGradient(ctx.canvas.width / 2, ctx.canvas.height / 2, 2, ctx.canvas.width / 4, ctx.canvas.height / 4, ctx.canvas.width);
                    grd.addColorStop(0, "lightblue");
                    grd.addColorStop(1, "white");
                    ctx.arc(ctx.canvas.width / 2, ctx.canvas.height / 2, 75, 0, 2 * Math.PI);
                    ctx.fillStyle = grd;
                    ctx.fill();

                    ctx.fillStyle = "#000";
                    ctx.lineWidth = 1;
                    ctx.fillStyle = "#000000";
                    ctx.lineStyle = "#000000";
                    if (urlParams["print"] !== "notext")
                        drawText(ctx, mainName, 120, 18);

                    ctx.canvas.parentNode.download = mainName + ".png";

                    let img = new Image();
                    img.crossOrigin = "Anonymous";
                    img.onload = function () {
                        drawImageScaled(img, ctx, 0.5, 22);
                        ctx.canvas.parentNode.href = ctx.canvas.toDataURL();
                    };
                    img.src = imgURL;
                });
            }

            if (Object.keys(filters).length > 0) {
                renderFilterResults(filters);
            }
        }

        function renderSinglePage(elementID, data) {
            let page = document.getElementById(elementID);
            page.style.display = 'block';
            if (page.className.indexOf('visible') === -1) {
                page.className += ' visible';
            }
        }

        function renderErrorPage(data) {
            // Hides and shows products in the All Products Page depending on the data it receives.
        }

        function hasClass(element, cls) {
            return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
        }

        function cancelread() {
            Array.prototype.forEach.call(document.getElementsByClassName("saveFile"), (elem) => {
                elem.innerHTML = "";
            });
            sendAmiiboFunc('cancelread');
        }

        function sendwifiinfo() {
            let ssid = document.getElementById("wifissid").value;
            let passkey = document.getElementById("wifipasskey").value;

            let msg = {
                "func": "configurewifi",
                "ssid": ssid,
                "passkey": passkey
            };

            console.log("Sending wifi config: " + JSON.stringify(msg));
            connection.send(JSON.stringify(msg));
        }

        function sendAmiiboFunc(funcName) {
            setProgress(0);
            Array.prototype.forEach.call(document.getElementsByClassName("amiiboData"), (elem) => {
                elem.innerHTML = "";
            });
            Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                elem.innerHTML = "";
            });
            console.log(funcName);
            let msg = {"func": funcName};
            connection.send(JSON.stringify(msg));
        }

        function getQueryFilename() {
            let search = parseQuery(window.location.search);
            return search["filename"];
        }

        function parseQuery(search) {
            let args = search.substring(1).split('&');
            let argsParsed = {};
            let i, arg, kvp, key, value;

            for (i = 0; i < args.length; i++) {
                arg = args[i];
                if (-1 === arg.indexOf('=')) {
                    argsParsed[decodeURIComponent(arg).trim()] = true;
                }
                else {
                    kvp = arg.split('=');
                    key = decodeURIComponent(kvp[0]).trim();
                    value = decodeURIComponent(kvp[1]).trim();
                    argsParsed[key] = value;
                }
            }

            return argsParsed;
        }

        function closemodal(e, force) {
            Array.prototype.forEach.call(document.getElementsByClassName("single-product"), (elem) => {
                if (hasClass(elem, 'visible')) {
                    let clicked = event.target || event.srcElement;
                    // If the close button or the background are clicked go to the previous page.
                    if (hasClass(clicked, 'close') || hasClass(clicked, 'overlay') || force) {
                        // Change the url hash with the last used filters.
                        createQueryHash(filters);
                        window.location.hash = '#';
                        window.location.search = '';
                    }
                }
            });
        }

        function createFileUploader(element, tree, editor) {
            let xmlHttp;
            let input = document.createElement("input");
            input.type = "file";
            input.multiple = false;
            input.name = "data";
            document.getElementById(element).appendChild(input);
            let path = document.createElement("input");
            path.id = "upload-path";
            path.type = "text";
            path.name = "path";
            path.defaultValue = "/";
            document.getElementById(element).appendChild(path);
            let button = document.createElement("button");
            button.innerHTML = 'Upload';
            document.getElementById(element).appendChild(button);

            function httpPostProcessRequest() {
                if (xmlHttp.readyState === 4) {
                    if (xmlHttp.status !== 200) alert("ERROR[" + xmlHttp.status + "]: " + xmlHttp.responseText);
                    else {
                    }
                }
            }

            button.onclick = function (e) {
                if (input.files.length === 0) {
                    return;
                }
                xmlHttp = new XMLHttpRequest();
                xmlHttp.onreadystatechange = httpPostProcessRequest;
                let formData = new FormData();
                formData.append("data", input.files[0], path.value);
                xmlHttp.open("POST", 'http://' + getHost() + '/uploadAmiibo');
                xmlHttp.send(formData);
                windowHashChange();
            };
            input.onchange = function (e) {
                if (input.files.length === 0) return;
                let filename = input.files[0].name;
                verifyFilename(path, filename);
            }
        }

        function verifyFilename(path, filename) {
            const filenameMaxLen = 32 - 1 - 1 - 4;
            let ext = /(?:\.([^.]+))?$/.exec(filename)[1];
            let name = /(.*)\.[^.]+$/.exec(filename)[1];
            if (typeof name !== "undefined") {
                if (name.length > filenameMaxLen) name = name.substring(0, filenameMaxLen);
                filename = name;
            }
            if (typeof ext !== "undefined") {

                filename = filename + "." + ext;
            }
            if (path.value === "/" || path.value.lastIndexOf("/") === 0) {
                path.value = "/" + filename;
            } else {
                path.value = path.value.substring(0, path.value.lastIndexOf("/") + 1) + filename;
            }
        }

        function uploadkeydata() {
            let keyText = document.getElementById("retail-key-text").value.replace(/[^A-Fa-f0-9]/g, "");
            document.getElementById("retail-key-text").value = keyText;

            if (keyText.length === 320) {
                Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                    elem.innerHTML = "Error: key length OK, uploading...";
                });
                let data = new Uint8Array(160);

                for (let i = 0; i < keyText.length; i += 2) {
                    data[i / 2] = parseInt(keyText.substring(i, i + 2), 16);
                }

                let blob = new Blob([data], {type: 'application/octet-stream'});

                xmlHttp = new XMLHttpRequest();

                let formData = new FormData();
                formData.append("data", blob, 'key_retail.bin');
                xmlHttp.open("POST", 'http://' + getHost() + '/uploadAmiibo');
                xmlHttp.send(formData);
                windowHashChange();
            }
            else {
                Array.prototype.forEach.call(document.getElementsByClassName("statusInfo"), (elem) => {
                    elem.innerHTML = "Error: key length is invalid.";
                });
            }
        }

        function generateFilterEntry(title, dbval) {
            let lookup = {}; // Avoids duplicates
            let html = "";
            html += '<div class="filter-criteria">';
            html += '<span>' + title + '</span>';

            let foundDBVal = Object.values(amiiboDBJSON[dbval]);
            foundDBVal.sort();

            let currentChecks = null;

            if (filters[title] != null) {
                currentChecks = Object.values(filters[title]);
                console.log("Matched filter.");
            }

            for (i in foundDBVal) {
                let val = foundDBVal[i];
                if (!(val in lookup)) {
                    lookup[val] = 1; // Avoid duplicates
                    let checked = "";
                    if (currentChecks != null && currentChecks.includes(val)) {
                        checked = "checked";
                    }
                    html += '<label><input class="filtercheckbox" type="checkbox" name="' + title + '" value="' + val + '" onclick="filtercheckboxClick(this)" ' + checked + '>' + val + '</label>'
                }
            }
            html += '</div>';
            return html;
        }

        function clearFilters() {
            Array.prototype.forEach.call(document.getElementsByClassName("filtercheckbox"), (elem) => {
                elem.checked = false;
            });
            filters = {};
            createQueryHash(filters);
            window.location.search = '';
            window.location.hash = '#';
        }

        function generateFilters() {
            let html = "";
            html += '<button onclick="clearFilters()">Clear filters</button>';
            html += generateFilterEntry('amiibo Series', 'amiibo_series');
            html += generateFilterEntry('Game Series', 'game_series');
            html += generateFilterEntry('Form', 'types');

            document.getElementById('filterForm').innerHTML = html;
        }

        function generateSingleProductHTML() {
            document.getElementById('read-amiibo').addEventListener("click", closemodal);
            document.getElementById('read-amiibo').innerHTML = singleProductPageHTML("Read amiibo", "read-amiibo", "sendAmiiboFunc('readnfc')", "cancelread()", true);

            document.getElementById('write-amiibo').addEventListener("click", closemodal);
            document.getElementById('write-amiibo').innerHTML = singleProductPageHTML("Write amiibo", "write-amiibo", "sendAmiiboFuncWithFilename('writenfc')", "sendAmiiboFunc('cancelwrite')");

            document.getElementById('delete-amiibo').addEventListener("click", closemodal);
            document.getElementById('delete-amiibo').innerHTML = singleProductPageHTML("Delete amiibo", "delete-amiibo", "sendAmiiboFuncWithFilename('deleteamiibo')", "closemodal(null, true)");

            document.getElementById('upload-amiibo').addEventListener("click", closemodal);
            document.getElementById('upload-retail-keys').addEventListener("click", closemodal);
            document.getElementById('configure-wifi').addEventListener("click", closemodal);
        }

        function openNav() {
            document.getElementById("mySidenav").style.width = "330px";
            document.getElementById("main").style.marginLeft = "330px";
        }

        function closeNav() {
            document.getElementById("mySidenav").style.width = "0";
            document.getElementById("main").style.marginLeft = "0";
        }

        function onBodyLoad() {
            windowHashChange();
            getAmiiboJSONDB();

            createFileUploader("uploader");
            generateSingleProductHTML();
            document.getElementById("toggleprint").checked = urlParams["print"];
        }

        function removeParam(key, sourceURL) {
            let rtn = sourceURL.split("?")[0],
                param,
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString !== "") {
                params_arr = queryString.split("&");
                for (let i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
            return rtn;
        }

        function insertParam(key, value) {
            key = encodeURIComponent(key);
            value = encodeURIComponent(value);

            let kvp = document.location.search.substr(1).split('&');
            if (kvp === '') {
                document.location.search = '?' + key + '=' + value;
            }
            else {

                let i = kvp.length;
                let x;
                while (i--) {
                    x = kvp[i].split('=');

                    if (x[0] === key) {
                        x[1] = value;
                        kvp[i] = x.join('=');
                        break;
                    }
                }

                if (i < 0) {
                    kvp[kvp.length] = [key, value].join('=');
                }

                //this will reload the page, it's likely better to store this until finished
                document.location.search = kvp.join('&');
            }
        }

        function toggleprint(elem) {
            if (urlParams["print"]) {
                window.location.search = removeParam("print", window.location.search);
            }
            else {
                insertParam("print", "true");
            }
        }

        window.onhashchange = windowHashChange;

        let urlParams;
        (window.onpopstate = function () {
            let match, pl = /\+/g,  // Regex for replacing addition symbol with a space
                search = /([^&=]+)=?([^&]*)/g,
                decode = function (s) {
                    return decodeURIComponent(s.replace(pl, " "));
                },
                query = window.location.search.substring(1);

            urlParams = {};
            while (match = search.exec(query))
                urlParams[decode(match[1])] = decode(match[2]);
        })();
    </script>
</head>

<body onload="onBodyLoad();">

<header class="compact">
    <h1 style="font-size:25px;cursor:pointer" onclick="openNav()">&#9776;</h1>
    <h1><a href="#">Wifiibo</a></h1>
    <button onclick="window.location.href='#readamiibo'">Read amiibo</button>
    <button onclick="window.location.href='#uploadamiibo'">Upload amiibo</button>
    <button onclick="window.location.href='#uploadretailkeys'" id="upload-button">Upload keys</button>
    <button onclick="window.location.href='#configurewifi'" id="configurewifi-button">Configure Wifi</button>
    <div id="alturl"></div>
    <br/>
    <div id="version">Version</div>
</header>

<div class="sidenav" id="mySidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <div class="filters" style="margin-bottom: 10px">
        <form id="filterForm"></form>
    </div>
    <div class="filters">
        <div class="filter-criteria">
            <span>Other Settings</span>
            <label><input type="checkbox" id="toggleprint" name="toggleprint" value="toggleprint" onclick="toggleprint(this)">Print View</label>
        </div>
    </div>
</div>

<div class="main-content" id="main">
    <div class="all-products page">
        <ul class="products-list" id="amiiboList"></ul>
    </div>

    <div class="single-product save-file page" id="read-amiibo"></div>
    <div class="single-product page" id="write-amiibo"></div>
    <div class="single-product page" id="delete-amiibo"></div>
    <div class="single-product page" id="upload-amiibo">
        <div class="overlay"></div>
        <div class="preview-large">
            <h3>Upload amiibo</h3>
            <div>
                <div id="uploader"></div>
            </div>
            <br/>
            <div>
                <span class="statusInfo"></span>
                <div class="tag-percent">
                    <div class="readWriteProgress">
                        <div class="readWriteProgressBar"></div>
                    </div>
                    <br/>
                </div>
            </div>
            <ul class="products-list amiiboData" style="opacity:100; margin-left:0px;">
            </ul>
            <span class="close">×</span>
        </div>
    </div>
    <div class="single-product page" id="upload-retail-keys">
        <div class="overlay"></div>
        <div class="preview-large">
            <h3>Upload Retail Keys</h3>
            <div>
                To find keys, Google search for:<br/>
                <b>Use this to Encrypt your custom Amiibo NTag pastebin</b><br/><br/>
                Paste everything after <br/>"paste this in your Favorite Hex Editor and save it as a bin!" here:<br/>
                <textarea id="retail-key-text" title="retail-key-text" rows="10" cols="50"></textarea><br/>
                <button onclick="uploadkeydata()">Submit</button>
            </div>
            <br/>
            <div>
                <span class="statusInfo"></span>
                <div class="tag-percent">
                    <div class="readWriteProgress">
                        <div class="readWriteProgressBar"></div>
                    </div>
                    <br/>
                </div>
            </div>
            <span class="close">×</span>
        </div>
    </div>
    <div class="single-product page" id="configure-wifi">
        <div class="overlay"></div>
        <div class="preview-large">
            <h3>Configure WiFi</h3>
            <div>
                <form>
                    SSID: <input title="wifissid" type="text" name="ssid" id="wifissid"><br/>
                    Passkey: <input title="passkey" type="text" name="passkey" id="wifipasskey"><br/>
                    <button onclick="sendwifiinfo()">Submit</button>
                    <br/><br/>
                    <button onclick="triggerWifiScan()">Scan Wifi</button>
                </form>
            </div>
            <div>
                <span class="statusInfo"></span>
            </div>
            <div id="scanresults"></div>
            <span class="close">×</span>
        </div>
    </div>
    <div class="single-product page">
        <div class="overlay"></div>
        <div class="preview-large">
            <h3>Single product view</h3>
            <img src=""/>
            <p></p>
            <span class="close">×</span>
        </div>
    </div>
    <div class="error page">
        <h3>Sorry, something went wrong :(</h3>
    </div>
</div>
</body>
</html>